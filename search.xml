<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>TypeScript</title>
      <link href="/2021/07/02/typescripe/"/>
      <url>/2021/07/02/typescripe/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章：TypeScript"><a href="#第一章：TypeScript" class="headerlink" title="第一章：TypeScript"></a>第一章：TypeScript</h1><h2 id="1、Typescript-开发环境搭建"><a href="#1、Typescript-开发环境搭建" class="headerlink" title="1、Typescript 开发环境搭建"></a>1、Typescript 开发环境搭建</h2><ol><li>下载 Node.js</li><li>安装 Node.js</li><li>使用 npm 全局安装 typescript<ul><li>进入命令行</li><li>输入：npm i -g typescript</li></ul></li><li>创建一个 ts 文件</li><li>使用 tsc 对 ts 文件进行编译<ul><li>进入命令行</li><li>进入 ts 文件所在目录</li><li>执行命令：tsc xxx.ts</li></ul></li></ol><h2 id="2、基本类型"><a href="#2、基本类型" class="headerlink" title="2、基本类型"></a>2、基本类型</h2><ul><li><p>类型声明</p><ul><li><p>类型声明是 TS 非常重要的一个特点</p></li><li><p>通过类型声明可以指定 TS 中变量（参数、形参）的类型</p></li><li><p>指定类型后，当为变量赋值时，TS 编辑器会自动检查值是否符合类型声明，符合则赋值，否则报错</p></li><li><p>简而言之，类型声明给变量设置了类型，使得变量只能存储某种类型的值</p></li><li><p>语法：</p><ul><li><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">let</span> 变量<span class="token punctuation">:</span> 类型<span class="token punctuation">;</span><span class="token keyword">let</span> 变量<span class="token punctuation">:</span> 类型 <span class="token operator">=</span> 值<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>参数<span class="token punctuation">:</span> 类型<span class="token punctuation">,</span> 参数<span class="token punctuation">:</span> 类型<span class="token punctuation">)</span><span class="token punctuation">:</span> 类型<span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li><li><p>自动类型判断</p><ul><li>TS 拥有自动的类型判断机制</li><li>当对变量的声明和赋值是同时进行的，TS 编译器会自动判断变量的类型</li><li>所以如果你的变量的声明和赋值同时进行的，可以省略掉类型声明</li></ul></li><li><p>类型：</p><table><thead><tr><th align="center">类型</th><th align="center">例子</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">number</td><td align="center">1, -33, 2.5</td><td align="center">任意数字</td></tr><tr><td align="center">string</td><td align="center">‘hi’, “hi”, hi</td><td align="center">任意字符串</td></tr><tr><td align="center">boolean</td><td align="center">true、false</td><td align="center">布尔值 true 或 false</td></tr><tr><td align="center">字面量</td><td align="center">其本身</td><td align="center">限制变量的值就是该字面量的值</td></tr><tr><td align="center">any</td><td align="center">*</td><td align="center">任意类型</td></tr><tr><td align="center">unknown</td><td align="center">*</td><td align="center">类型安全的 any</td></tr><tr><td align="center">void</td><td align="center">空值（undefined）</td><td align="center">没有值（或 undefined）</td></tr><tr><td align="center">never</td><td align="center">没有值</td><td align="center">不能是任何值</td></tr><tr><td align="center">object</td><td align="center">{name: ‘孙悟空’}</td><td align="center">任意的 JS 对象</td></tr><tr><td align="center">array</td><td align="center">[1, 2, 3]</td><td align="center">任意 JS 数组</td></tr><tr><td align="center">tuple</td><td align="center">[4, 5]</td><td align="center">元素，TS 新增类型，固定长度数组</td></tr><tr><td align="center">enum</td><td align="center">enum{A, B}</td><td align="center">枚举，TS 中新增类型</td></tr></tbody></table></li><li><p>number</p><ul><li><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">let</span> decimal<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token keyword">let</span> hex<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">0xf00d</span><span class="token punctuation">;</span><span class="token keyword">let</span> binary<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">0b1010</span><span class="token punctuation">;</span><span class="token keyword">let</span> octal<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">0o744</span><span class="token punctuation">;</span><span class="token keyword">let</span> big<span class="token punctuation">:</span> bigint <span class="token operator">=</span> 100n<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>boolean</p><ul><li><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">let</span> isDone<span class="token punctuation">:</span> <span class="token keyword">boolean</span> <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>string</p><ul><li><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">let</span> color<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">=</span> <span class="token string">"bule"</span><span class="token punctuation">;</span>color <span class="token operator">=</span> <span class="token string">'red'</span><span class="token punctuation">;</span><span class="token keyword">let</span> fullName<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">=</span> <span class="token template-string"><span class="token string">`Bob Bobbington`</span></span><span class="token punctuation">;</span><span class="token keyword">let</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">37</span><span class="token punctuation">;</span><span class="token keyword">let</span> sentence<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">=</span> <span class="token template-string"><span class="token string">`Hello, my name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>fullName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.I will be </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>age <span class="token operator">+</span> <span class="token number">1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> years old next month.`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>字面量</p><ul><li><p>也可以使用字面量去指定变量的类型，通过字面量可以确定变量的取值范围</p></li><li><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">let</span> color<span class="token punctuation">:</span> <span class="token string">'red'</span> <span class="token operator">|</span> <span class="token string">'blue'</span> <span class="token operator">|</span> <span class="token string">'black'</span><span class="token punctuation">;</span><span class="token keyword">let</span> num<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">2</span> <span class="token operator">|</span> <span class="token number">3</span> <span class="token operator">|</span> <span class="token number">4</span> <span class="token operator">|</span> <span class="token number">5</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p>any</p><ul><li><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">let</span> d<span class="token punctuation">:</span> <span class="token keyword">any</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>d <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token punctuation">;</span>d <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>unknown</p><ul><li><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">let</span> notSure<span class="token punctuation">:</span> unknown <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>notSure <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p>void</p><ul><li><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">let</span> unusable<span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token operator">=</span> undefined<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>never</p><ul><li><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">error</span><span class="token punctuation">(</span>message<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span> never<span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>object ( 没啥用 )</p><ul><li><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">let</span> obj<span class="token punctuation">:</span> object <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>array</p><ul><li><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">let</span> list<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> list<span class="token punctuation">:</span> <span class="token keyword">Array</span><span class="token operator">&lt;</span><span class="token keyword">number</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p>tuple</p><ul><li><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">let</span> x<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">number</span><span class="token punctuation">]</span><span class="token punctuation">;</span>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p>enum</p><ul><li><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">enum</span> Color <span class="token punctuation">{</span>    Red<span class="token punctuation">,</span>    Green<span class="token punctuation">,</span>    Blue<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">let</span> c<span class="token punctuation">:</span> Color <span class="token operator">=</span> Color<span class="token punctuation">.</span>Green<span class="token punctuation">;</span><span class="token keyword">enum</span> Color <span class="token punctuation">{</span>    Red <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>    Green<span class="token punctuation">,</span>    Blue<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">let</span> c<span class="token punctuation">:</span> Color <span class="token operator">=</span> color<span class="token punctuation">.</span>Green<span class="token punctuation">;</span><span class="token keyword">enum</span> Color<span class="token punctuation">{</span>    Red <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>    Green <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>    Blue <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">let</span> c<span class="token punctuation">:</span> Color <span class="token operator">=</span> Color<span class="token punctuation">.</span>Green<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>类型断言</p><ul><li><p>有些情况下，变量的类型对于我们来说是很明确，但是 TS 编译器却不清楚，此时，可以通过类型断言来告诉编译器变量的类型，断言有两种形式：</p><ul><li><p>第一种</p><ul><li><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">let</span> someValue<span class="token punctuation">:</span> unknown <span class="token operator">=</span> <span class="token string">"this is a string"</span><span class="token punctuation">;</span><span class="token keyword">let</span> strLength<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token punctuation">(</span>someValue as <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p>第二种</p><ul><li><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">let</span> someValue<span class="token punctuation">:</span> unknown <span class="token operator">=</span> <span class="token string">"this is a string"</span><span class="token punctuation">;</span><span class="token keyword">let</span> strLength<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span>someValue<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li></ul></li></ul></li></ul><h2 id="3、编译选项"><a href="#3、编译选项" class="headerlink" title="3、编译选项"></a>3、编译选项</h2><ul><li><p>自动编译文件</p><ul><li><p>编译文件时，使用 -w 指令后，TS 编译器会自动监视文件的变化，并在文件发生变化时对文件重新编译。</p></li><li><p>实例：</p><ul><li><pre class="line-numbers language-typescript"><code class="language-typescript">tsc xxx<span class="token punctuation">.</span>ts <span class="token operator">-</span>w<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul></li><li><p>自动编译整个项目</p><ul><li><p>如果直接使用 tsc 指令，则可以自动将当前项目下的所有 ts 文件编译为 js 文件。</p></li><li><p>但是能直接使用 tsc 命令的前提时，要先在项目根目录下创建一个 ts 的配置文件 tsconfig.json</p></li><li><p>tsconfig.json 是一个 JSON 文件，添加配置文件后，只需 tsc 命令即可完成对整个项目的编译</p></li><li><p>配置选项：</p><ul><li><p>include</p><ul><li><p>定义希望被编译文件所在的目录</p></li><li><pre class="line-numbers language-json"><code class="language-json">默认值：<span class="token punctuation">[</span><span class="token string">"**/*"</span><span class="token punctuation">]</span>//路径：** 表示任意目录//      * 表示任意文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>示例：</p><ul><li><pre class="line-numbers language-json"><code class="language-json"><span class="token property">"include"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"src/**/*"</span><span class="token punctuation">,</span> <span class="token string">"tests/**/*"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>上述示例中，所有 src 目录和 tests 目录下的文件都会被编译</p></li></ul></li></ul></li><li><p>exclude</p><ul><li><p>定义需要排除在外的目录</p></li><li><p>默认值：[“node_modules”, “bower_components”, “jspm_packages”]</p></li><li><p>示例：</p><ul><li><pre class="line-numbers language-json"><code class="language-json"><span class="token property">"exclude"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"./src/hello/**/*"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>上述示例中，src 下 hello 目录下的文件都不会被编译</p></li></ul></li></ul></li><li><p>extends</p><ul><li><p>定义被编译的配置文件</p></li><li><p>示例：</p><ul><li><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token string">"extends"</span><span class="token punctuation">:</span> <span class="token string">"./configs/base"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>上述示例中，当前配置文件中会自动包含 config 目录下 base.json 中的所有配置信息</p></li></ul></li></ul></li><li><p>files</p><ul><li><p>指定被编译文件的列表，只有需要编译的文件少时才会用到</p></li><li><p>示例：</p><ul><li><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token string">"files"</span><span class="token punctuation">:</span><span class="token punctuation">[</span>    <span class="token string">"core.ts"</span><span class="token punctuation">,</span>    <span class="token string">"sys.ts"</span><span class="token punctuation">,</span>    <span class="token string">"types.ts"</span><span class="token punctuation">,</span>    <span class="token string">"scanner.ts"</span><span class="token punctuation">,</span>    <span class="token string">"parser.ts"</span><span class="token punctuation">,</span>    <span class="token string">"utilities.ts"</span><span class="token punctuation">,</span>    <span class="token string">"binder.ts"</span><span class="token punctuation">,</span>    <span class="token string">"checker.ts"</span><span class="token punctuation">,</span>    <span class="token string">"tsc.ts"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>列表中的文件都会被 TS 编译器所编译</p></li></ul></li></ul></li><li><p>compilerOptions</p><ul><li><p>编译选项是配置文件中非常重要也比较复杂的配置选项</p></li><li><p>在 compilerOptions 中包含多个子选项，用来完成对编译的配置</p><ul><li><p>项目选项</p><ul><li><p>target</p><ul><li><p>设置 ts 代码编译的目标版本</p></li><li><p>可选值：</p><ul><li>ES3（默认）、ES5、ES6/ES2015、ES7/ES2016、ES2017、ES2018、ES2019、ES2020、ESNext</li></ul></li><li><p>示例：</p><ul><li><pre class="line-numbers language-json"><code class="language-json"><span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"target"</span><span class="token operator">:</span> <span class="token string">"ES6"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>如上设置，我们编写的 ts 代码将会编译为 ES6 版本的 js 代码</p></li></ul></li></ul></li><li><p>lib</p><ul><li><p>指定代码运行时所包含的库（宿主环境）</p></li><li><p>可选值：</p><ul><li>ES5、ES6/ES2015、ES7/ES2016、ES2017、ES2018、ES2019、ES2020、ESNext、DOM、WebWorker、ScriptHost ……</li></ul></li><li><p>示例：</p><ul><li><pre class="line-numbers language-json"><code class="language-json"><span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"target"</span><span class="token operator">:</span> <span class="token string">"ES6"</span><span class="token punctuation">,</span>    <span class="token property">"lib"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"ES6"</span><span class="token punctuation">,</span> <span class="token string">"DOM"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"outDir"</span><span class="token operator">:</span> <span class="token string">"dist"</span><span class="token punctuation">,</span>    <span class="token property">"outFile"</span><span class="token operator">:</span> <span class="token string">"dist/aa.js"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li><li><p>module</p><ul><li><p>设置编码后代码使用的模块化系统</p></li><li><p>可选值：</p><ul><li>CommonJS、UMD、AMD、System、ES2020、ESNext、None</li></ul></li><li><p>示例：</p><ul><li><pre class="line-numbers language-json"><code class="language-json"><span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"module"</span><span class="token operator">:</span> <span class="token string">"CommonJS"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li><li><p>outDir</p><ul><li><p>编译后文件的所在目录</p></li><li><p>默认情况下，编译后的 js 文件位于相同的目录，设置 outDir 后可以改变编译后文件的位置</p></li><li><p>示例：</p><ul><li><pre class="line-numbers language-json"><code class="language-json"><span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"outDir"</span><span class="token operator">:</span> <span class="token string">"dist"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>设置后编译后的 js 文件将会生成到 dist 目录</p></li></ul></li></ul></li><li><p>outFile</p><ul><li><p>将所有的文件编译为一个 js 文件</p></li><li><p>默认会将所有编写在全局作用域中的代码合并为一个 js 文件，如果 module 制定了 None、System 或 AMD 则会将模块一起合并到文件之中</p></li><li><p>示例：</p><ul><li><pre class="line-numbers language-json"><code class="language-json"><span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"outFile"</span><span class="token operator">:</span> <span class="token string">"dist/app.js"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li><li><p>rootDir</p><ul><li><p>指定代码的根目录，默认情况下编译后文件的目录结构会以最长的公共目录为根目录，通过 rootDir 可以手动指定根目录</p></li><li><p>示例：</p><ul><li><pre class="line-numbers language-json"><code class="language-json"><span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"rootDir"</span><span class="token operator">:</span> <span class="token string">"./src"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li><li><p>allowJs</p><ul><li>是否对 js 文件编译</li></ul></li><li><p>checkJs</p><ul><li><p>是否对 js 文件进行检查</p></li><li><p>示例：</p><ul><li><pre class="line-numbers language-json"><code class="language-json"><span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"allowJs"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"checkJs"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li><li><p>removeComments</p><ul><li>是否删除注释</li><li>默认值：false</li></ul></li><li><p>noEmit</p><ul><li>不对代码就行编译</li><li>默认值：false</li></ul></li><li><p>sourceMap</p><ul><li>是否生成 sourceMap</li><li>默认值：false</li></ul></li><li><p>严格检查</p><ul><li>strict<ul><li>启用所有的严格检查，默认值为 true，设置后相当于开启了所有的严格检查</li></ul></li><li>alwaysStrict<ul><li>总是以严格模式对代码进行编译</li></ul></li><li>noImplicitAny<ul><li>禁止隐式的 any 类型</li></ul></li><li>noImplicitThis<ul><li>禁止类型不明确的 this</li></ul></li><li>strictBindCallApply<ul><li>严格检查 bind、call 和 apply 的参数列表</li></ul></li><li>strictFunctionTypes<ul><li>严格检查函数的类型</li></ul></li><li>strictNullChecks<ul><li>严格的空值检查</li></ul></li><li>strictPropertyInitialization<ul><li>严格检查属性是否初始化</li></ul></li></ul></li><li><p>额外检查</p><ul><li>noFallthroughCasesInSwitch<ul><li>检查 switch 语句包含正确的 break</li></ul></li><li>noImplicitReturns<ul><li>检查函数没有隐式的返回值</li></ul></li><li>noUnusedLocals<ul><li>检查未使用的局部变量</li></ul></li><li>noUnusedParameters<ul><li>检查未使用的参数</li></ul></li></ul></li><li><p>高级</p><ul><li>allowUnreachableCode<ul><li>检查不可达代码</li><li>可选值：<ul><li>true，忽略不可达代码</li><li>false，不可达代码将引起错误</li></ul></li></ul></li><li>noEmitOnError<ul><li>有错误的情况下不进行编译</li><li>默认值：false</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><h2 id="4、TypeScript-打包"><a href="#4、TypeScript-打包" class="headerlink" title="4、TypeScript 打包"></a>4、TypeScript 打包</h2><h3 id="webpack-整合"><a href="#webpack-整合" class="headerlink" title="webpack 整合"></a>webpack 整合</h3><p>通常情况下，实际开发中我们都需要使用构建工具对代码进行打包；</p><p>TS 同样也可以结合构建工具一起使用，下边以 webpack 为例介绍一下如何结合构建工具使用TS；</p><p>步骤如下：</p><ul><li><p><strong>初始化项目</strong></p><ul><li>进入项目根目录，执行命令 npm init -y，创建 package.json 文件</li></ul></li><li><p><strong>下载构建工具</strong></p><ul><li><p>命令如下：</p><pre class="line-numbers language-powershell"><code class="language-powershell">npm i <span class="token operator">-</span>D webpack webpack<span class="token operator">-</span><span class="token function">cli</span> webpack<span class="token operator">-</span>dev<span class="token operator">-</span>server typescript ts<span class="token operator">-</span>loader clean<span class="token operator">-</span>webpack<span class="token operator">-</span>plugin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>共安装了 7 个包</p><ul><li>webpack：构建工具 webpack</li><li>webpack-cli：webpack 的命令行工具</li><li>webpack-dev-server：webpack 的开发服务器</li><li>typescript：ts 编译器</li><li>ts-loader：ts 加载器，用于在 webpack 中编译 ts 文件</li><li>html-webpack-plugin：webpack 中 html 插件，用来自动创建 html 文件</li><li>clean-webpack-plugin：webpack 中的清除插件，每次构建都会先清除目录</li></ul></li></ul></li><li><p><strong>配置 webpack</strong></p><ul><li><p>根目录下创建 webpack 的配置文件 webpack.config.js：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"html-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">{</span> CleanWebpackPlugin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"clean-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    optimization<span class="token punctuation">:</span> <span class="token punctuation">{</span>        minimize<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token comment" spellcheck="true">// 关闭代码压缩，可选</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 指定入口文件</span>    entry<span class="token punctuation">:</span> <span class="token string">"./src/index.ts"</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 指定打包文件所在目录</span>    output<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 指定打包文件的目录</span>        path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 打包后文件的名字</span>        filename<span class="token punctuation">:</span> <span class="token string">"bundle.js"</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 告诉 webpack 不使用箭头函数，可选</span>        environment<span class="token punctuation">:</span> <span class="token punctuation">{</span>            arrowFunction<span class="token punctuation">:</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 指定 webpack 打包时要使用的模块</span>    module<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 指定要加载的规则</span>        rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// test 指定的是规则生效的文件</span>                test<span class="token punctuation">:</span> <span class="token regex">/\.ts$/</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">// 要使用的 loader</span>                use<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    loader<span class="token punctuation">:</span> <span class="token string">"ts-loader"</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">// 要排除的文件</span>                exclude<span class="token punctuation">:</span> <span class="token regex">/node_modules/</span>            <span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 配置 webpack 插件</span>    plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// title: '这是一个自定义的 title'</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 用来设置引用模块</span>    resolve<span class="token punctuation">:</span> <span class="token punctuation">{</span>        extensions<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'.ts'</span><span class="token punctuation">,</span> <span class="token string">'.js'</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>配置 TS 编译选项</strong></p><ul><li><p>根目录下使用 tsc –init 创建 tsconfig.json，配置可以根据自己需要</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>   <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>       <span class="token property">"target"</span><span class="token operator">:</span> <span class="token string">"es6"</span><span class="token punctuation">,</span>       <span class="token property">"module"</span><span class="token operator">:</span> <span class="token string">"es6"</span><span class="token punctuation">,</span>       <span class="token property">"strict"</span><span class="token operator">:</span> <span class="token boolean">true</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>修改 package.json 配置</strong></p><ul><li><p>修改 package.json 添加如下配置</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>   ...   <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>       <span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span><span class="token punctuation">,</span>       <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"webpack"</span><span class="token punctuation">,</span>       <span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"webpack serve --open chrome.exe"</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   ...<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>项目使用</strong></p><ul><li>在 src 下创建 ts 文件，并在命令行执行 npm run build 对代码进行编译；</li><li>或者执行 npm start 来启动开发服务器；</li></ul></li></ul><h3 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h3><p>除了 webpack，开发中还经常需要结合 babel 来对代码进行转换；</p><p>以使其可以兼容到更多的浏览器，在上述步骤的基础上，通过一下步骤再将 babel 引入到项目中；</p><blockquote><p>虽然TS在编译时也支持代码转换，但是只支持简单的代码转换；</p><p>对于例如：Promise等ES6特性，TS无法直接转换，这时还要用到babel来做转换；</p></blockquote><ul><li><p>安装依赖包：</p><pre class="line-numbers language-powershell"><code class="language-powershell">npm i <span class="token operator">-</span>D @babel<span class="token operator">/</span>core @babel<span class="token operator">/</span>preset<span class="token operator">-</span>env babel<span class="token operator">-</span>loader core<span class="token operator">-</span>js<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>共安装了 4 个包，分别是：<ul><li>@babel/core：babel 的核心工具</li><li>@babel/preset-env：babel 的预定义环境</li><li>@babel-loader：babel 在 webpack 中的加载器</li><li>core-js：core-js 用来使老版本的浏览器支持新版 ES 语法</li></ul></li></ul></li><li><p>修改 webpack.config.js 配置文件</p><pre class="line-numbers language-json"><code class="language-json">...// 指定 webpack 打包时要使用的模块module<span class="token operator">:</span> <span class="token punctuation">{</span>    // 指定要加载的规则    rules<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>        // test 指定的是规则生效的文件        test<span class="token operator">:</span> /\.ts$/<span class="token punctuation">,</span>        // 要使用的 loader        use<span class="token operator">:</span> <span class="token punctuation">[</span>            // 配置 babel            <span class="token punctuation">{</span>                // 指定加载器                loader<span class="token operator">:</span> <span class="token string">"babel-loader"</span><span class="token punctuation">,</span>                // 设置 babel                options<span class="token operator">:</span> <span class="token punctuation">{</span>                    // 设置预定义的环境                    presets<span class="token operator">:</span> <span class="token punctuation">[</span>                        <span class="token punctuation">[</span>                            // 指定环境的插件                            <span class="token string">"@babel/presets-env"</span><span class="token punctuation">,</span>                            // 配置信息                            <span class="token punctuation">{</span>                                // 要兼容的目标浏览器                                targets<span class="token operator">:</span> <span class="token punctuation">{</span>                                    <span class="token property">"chrome"</span><span class="token operator">:</span> <span class="token string">"58"</span><span class="token punctuation">,</span>                                    <span class="token property">"ie"</span><span class="token operator">:</span> <span class="token string">"11"</span>                                <span class="token punctuation">}</span><span class="token punctuation">,</span>                                                                // 指定 corejs 的版本                                <span class="token property">"corejs"</span><span class="token operator">:</span> <span class="token string">"3"</span><span class="token punctuation">,</span>                                // 使用 corejs 的方式 <span class="token string">"usage"</span> 表示按需加载                                <span class="token property">"useBuiltIns"</span><span class="token operator">:</span> <span class="token string">"usage"</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">]</span>                    <span class="token punctuation">]</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            'ts-loader'<span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        // 要排除的文件        exclude<span class="token operator">:</span> /node_modules/    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span>...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如此一来，使用 ts 编译后的文件将会再次被 babel 处理；</p><p>使得代码可以在大部分浏览器中直接使用；</p><p>同时可以在配置选项的 targets 中指定要兼容的浏览器版本；</p></li></ul><h2 id="5、面向对象"><a href="#5、面向对象" class="headerlink" title="5、面向对象"></a>5、面向对象</h2><p>1、类（class）</p><p>要想面向对象，操作对象，首先便要拥有对象，那么下一个问题就是如何创建对象。要创建对象，必须要先定义类，所谓的类可以理解为对象的模型。程序中可以根据类创建指定类型的对象。</p><p>举例来说：可以通过 Person 类来创建人的对象，通过 Dog 类创建狗的对象，通过 Car 类来创建汽车的对象，不同的类可以用来创建不同的对象。</p><ul><li><p><strong>定义类</strong></p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">class</span> 类名<span class="token punctuation">{</span>    属性名：类型；        <span class="token keyword">constructor</span><span class="token punctuation">(</span>参数：类型<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>属性名 <span class="token operator">=</span> 参数<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token function">方法名</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token operator">...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>    age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`大家好，我是</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用类：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'孙悟空'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>构造函数</strong></p><p>可以使用 constructor 定义一个构造器方法；</p><blockquote><p><strong>注1：在 TS 中只能有一个构造器方法！</strong></p></blockquote><p>例如：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>    age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>        <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时也可也直接将属性定义在构造函数中:</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token punctuation">{</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">public</span> name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">public</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面两种定义方法是完全相同的</p><blockquote><p><strong>注2：子类继承父类时，必须调用父类的构造方法（如果子类中也定义了构造方法）！</strong></p></blockquote><p>例如：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> num<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>num<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">=</span> num<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">X</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>num<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果在 X 类中不调用 super 将会报错！</p></li><li><p>封装</p><p>对象实质上就是属性和方法的容器，它是主要作用就是存储属性和方法，这就是所谓的封装</p><p>默认情况下，对象的属性是可以任意修改的，为了确保数据的安全性，在 TS 中可以对属性的权限进行设置</p><ul><li>静态属性（static）：<ul><li>声明为 static 的属性或方法不再属于实例，而是属于类的属性</li></ul></li><li>只读属性（readonly）：<ul><li>如果在声明属性时添加一个 readonly，则属性便成了只读属性无法修改</li></ul></li><li>TS 中属性具有三种修饰符：<ul><li>public（默认值），可以在类、子类和对象中修改</li><li>protected，可以再类、子类中修改</li><li>private，可以在类中修改</li></ul></li></ul><p>示例：</p><p>public：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 不写默认为 public</span>    <span class="token keyword">public</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>        <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 可以在类中修改</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`大家好，我是</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name <span class="token comment" spellcheck="true">// 子类中可以修改</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'孙悟空'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'猪八戒'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 可以通过对象修改</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>protected:</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>        <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 可以在类中修改</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`大家好，我是</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 子类中可以修改</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'孙悟空'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'猪八戒'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 不能修改</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>private：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> name<span class="token punctuation">:</span> stirng<span class="token punctuation">;</span>    <span class="token keyword">private</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>        <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 可以在类中修改</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`大家好，我是</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 子类中不能修改</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'孙悟空'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'猪八戒'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 不能修改</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>属性存取器</strong></p><p>对于一些不希望被任意修改的属性，可以将其设置为 private</p><p>直接将其设置为 private 将导致无法再通过对象修改其中的属性</p><p>我们可以再类中定义一组读取、设置属性的方法，这种对属性读取或设置的属性被称为属性的存取器</p><p>读取属性的方法叫做 setter 方法，设置属性的方法叫做 getter 方法</p><p>示例：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> _name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>        <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">get</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">set</span> <span class="token function">name</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'孙悟空'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 实际通过调用 getter 方法读取 name 属性</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 实际通过调用 setter 方法修改 name 属性</span>p1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'猪八戒'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>静态属性</strong></p><p>静态属性（方法），也称为类属性。使用静态属性无需创建实例，通过类即可直接使用</p><p>静态属性（方法）使用 static 开头</p><p>示例：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Tools</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> PI <span class="token operator">=</span> <span class="token number">3.1415926</span><span class="token punctuation">;</span>        <span class="token keyword">static</span> <span class="token function">sum</span><span class="token punctuation">(</span>num1<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> num2<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2    <span class="token punctuation">}</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Tools<span class="token punctuation">.</span>PI<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Tools<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">456</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>this</strong></p><p>在类中，使用 this 表示当前对象</p></li><li><p><strong>继承</strong></p><p>继承时面向对象中的又一个特性</p><p>通过继承可以将其他类中的属性和方法引入到当前类中</p><p>示例：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>    age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>        <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">在汪汪叫！`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">'旺财'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dog<span class="token punctuation">.</span><span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过继承可以在不修改类的情况下完成对类的扩展</p></li><li><p>重写</p><p>发生继承时，如果子类中的方法会替换掉父类中的同名方法，这就称为方法的重写</p><p>示例：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>    age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>        <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`父类中的 run 方法！`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>    <span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">在汪汪叫！`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`子类中的 run 方法，会重现父类中的 run 方法！`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`旺财`</span></span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dog<span class="token punctuation">.</span><span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在子类中可以使用 super 来完成对父类的引用</p><p>抽象类（abstract class）</p><p>抽象类是专门用来被其他类所继承的类，它只能被其他类所继承，不能用来创建实例</p><pre class="line-numbers language-typescript"><code class="language-typescript">abstract <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    abstract <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>    <span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'动物在叫~'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animals</span> <span class="token punctuation">{</span>    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'狗在跑~'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 abstract 开头的方法叫做抽象方法，抽象方法没有方法体只能定义在抽象类中，继承抽象类时抽象方法必须要实现；</p></li><li><p><strong>接口（Interface）</strong></p><p>接口的作用类似于抽象类，不同点在于：接口中的所有方法和属性都是没有实值的，换句话说接口中的所有方法都是抽象方法；</p><p>接口主要负责定义一个类的结构，接口可以去限制一个对象的接口：对象只有包含接口中定义的所有属性和方法时才能匹配接口；</p><p>同时，可以让一个类去实现接口，实现接口时类中要保护接口中的所有属性；</p><p>示例（检查对象类型）：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>    <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>per<span class="token punctuation">:</span> Person<span class="token punctuation">)</span> <span class="token punctuation">{</span>    per<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'孙悟空'</span><span class="token punctuation">,</span>     <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Hello, 我是 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例（实现）：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>    <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">public</span> name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>    <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'大家好，我是'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>泛型（Generic）</strong></p><p>定义一个函数或类时，有些情况下无法确定其中要使用的具体类型（返回值、参数、属性的类型不能确定）；</p><p>此时泛型便能够发挥作用；</p><p>举个例子：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span>arg<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">any</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> arg<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上例中，test 函数有一个参数类型不确定，但是能确定的是其返回值的类型和参数的类型是相同的；</p><p>由于类型不确定所以参数和返回值均使用了 any，但是很明显这样做是不合适的：</p><p>首先使用 any 会关闭 TS 的类型检查，其次这样设置也不能体现出参数和返回值是相同的类型；</p></li><li><p><strong>泛型函数</strong></p><ul><li><p>创建泛型函数</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">function</span> test<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> T<span class="token punctuation">{</span>    <span class="token keyword">return</span> arg<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里的 <T> 就是泛型；</p><p>T 是我们给这个类型起的名字（不一定非叫 T ），设置泛型后即可在函数中使用 T 来表示该类型；</p><p>所以泛型其实很好理解，就表示某个类型；</p><p>那么如何使用上边的函数呢？</p></li><li><p>使用泛型函数</p><ul><li><p>方式一（直接使用）：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用时可以直接传递参数使用，类型会由 TS 自动推断出来，但有时编译器无法自动推断时还需要使用下面的方式</p></li><li><p>方式二（指定类型）：</p><pre class="line-numbers language-typescript"><code class="language-typescript">test<span class="token operator">&lt;</span><span class="token keyword">number</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也可也在函数后手动指定泛型；</p></li></ul></li><li><p>函数中声明多个泛型</p><p>可以同时指定多个泛型，泛型间使用逗号隔开：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">function</span> test<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> K<span class="token operator">></span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> T<span class="token punctuation">,</span> b<span class="token punctuation">:</span> K<span class="token punctuation">)</span><span class="token punctuation">:</span> K <span class="token punctuation">{</span>    <span class="token keyword">return</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span>test<span class="token operator">&lt;</span><span class="token keyword">number</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>使用泛型时，完全可以将泛型当成是一个普通的类去使用；</p></li></ul></li><li><p><strong>泛型类</strong></p><p>除此之外，也可以对泛型的范围进行约束</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">MyInter</span> <span class="token punctuation">{</span>    length<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> test<span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">MyInter</span><span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> arg<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 T extends MyInter 表示泛型 T 必须是 MyInter 的子类，不一定非要使用接口类和抽象类同样适用；</p></li></ul><h2 id="6、贪吃蛇练习"><a href="#6、贪吃蛇练习" class="headerlink" title="6、贪吃蛇练习"></a>6、贪吃蛇练习</h2><p>使用 TypeScripe + Webpack + Less 实现贪吃蛇的例子</p><p><strong>项目依赖</strong></p><p>TypeScript：</p><ul><li>typescript</li><li>ts-loader</li></ul><p>Webpack：</p><ul><li>webpack</li><li>webpack-cli</li><li>webpack-dev-server</li><li>html-webpack-plugin</li><li>clean-webpack-plugin</li></ul><p>Babel</p><ul><li>core-js</li><li>babel-loader</li><li>@babel/core</li><li>@babel/preset-env</li></ul><p>Less &amp; CSS 资源</p><ul><li>style-loader</li><li>css-loader</li><li>less</li><li>less-loader</li><li>postcss</li><li>postcss-loader</li><li>postcss-preset-env</li></ul><p><strong>项目使用</strong></p><ul><li><p><strong>编译运行</strong></p><p>在确保已经正确安装 node 和 npm 的前提下：</p><p>分别执行下面的命令安装依赖并编译项目：</p><pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># 安装依赖</span>npm i<span class="token comment" spellcheck="true"># 编译打包</span>npm run build<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>编译完成后，使用浏览器打开 dist 目录下的 index.html 即可游玩；</p></li><li><p><strong>继续开发</strong></p><p>使用 npm run start 进入开发模型；</p><p>默认使用 Chrome 浏览器打开，可以修改 package.json 中的值：</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span><span class="token punctuation">,</span>        <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"webpack"</span><span class="token punctuation">,</span>        <span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"webpack serve --open chrome.exe"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm常用的安装命令</title>
      <link href="/2021/06/20/npm-chang-yong-de-an-zhuang-ming-ling/"/>
      <url>/2021/06/20/npm-chang-yong-de-an-zhuang-ming-ling/</url>
      
        <content type="html"><![CDATA[<h2 id="1、npm常用的安装命令"><a href="#1、npm常用的安装命令" class="headerlink" title="1、npm常用的安装命令"></a>1、npm常用的安装命令</h2><p>npm i 就是 npm install 简写<br>npm i xxx -D   就是 npm i xxx –save-dev<br>npm i xxx -S   就是 npm i xxx –save<br>npm i xxx -g   就是 全局安装<br>npm i xxx      就是 npm i xxx –save</p><h2 id="2、–save-dev-和-–save-的区别"><a href="#2、–save-dev-和-–save-的区别" class="headerlink" title="2、–save-dev 和 –save 的区别"></a>2、–save-dev 和 –save 的区别</h2><p>使用 –save-dev 安装的 插件，被写入到 devDependencies 对象里面去，</p><p>而使用 –save 安装的插件，则被写入到 dependencies 对象里面去。</p><h2 id="3、devDependencies-和-dependencies-区别"><a href="#3、devDependencies-和-dependencies-区别" class="headerlink" title="3、devDependencies 和 dependencies 区别"></a>3、devDependencies 和 dependencies 区别</h2><p>devDependencies 和 dependencies 对象区别：</p><p>devDependencies 里面的插件只用于开发环境，不用于生产环境，</p><p>而 dependencies 是需要发布到生产环境的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Nodejs </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
