<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>v-if和v-show有什么区别？</title>
      <link href="/2021/07/16/v-if-he-v-show-you-shi-me-qu-bie/"/>
      <url>/2021/07/16/v-if-he-v-show-you-shi-me-qu-bie/</url>
      
        <content type="html"><![CDATA[<h1 id="v-if-和-v-show-有什么区别？"><a href="#v-if-和-v-show-有什么区别？" class="headerlink" title="v-if 和 v-show 有什么区别？"></a>v-if 和 v-show 有什么区别？</h1><p><strong>相同的：</strong>两者都是在判断 DOM 节点是否要显示</p><p><strong>不同点：</strong></p><ol><li>实现方式：<ol><li>v-if 是根据后面数据的真假值判断直接从 DOM 数上删除或重建元素节点。</li><li>v-show 只是在修改元素的 css 样式，也就是 display 的属性值，元素始终在 DOM 树上。</li></ol></li><li>编译过程：<ol><li>v-if 切换有一个局部编译/卸载的过程，切换过程中合适地销毁和重建内部的事件监听和子组件。</li><li>v-show 只是简单的基于 css 切换</li></ol></li><li>编译条件：<ol><li>v-if 是惰性的，如果初始条件为假，则什么也不做，只有在条件第一次变为真时才开始局部编译。</li><li>v-show 是在任何条件下（首次条件是否为真）都被编译，然后被缓存，而且 DOM 元素始终被保留。</li></ol></li><li>性能消耗：<ol><li>v-if 有更多的切换消耗，不适合做频繁的切换。</li><li>v-show 有更多的初始渲染消耗，适合做频繁的切换。</li></ol></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>v-on 修饰符</title>
      <link href="/2021/07/16/v-on-xiu-shi-fu/"/>
      <url>/2021/07/16/v-on-xiu-shi-fu/</url>
      
        <content type="html"><![CDATA[<h1 id="v-on-修饰符"><a href="#v-on-修饰符" class="headerlink" title="v-on 修饰符"></a>v-on 修饰符</h1><ul><li>Vue 提供了修饰符来帮助我们方便的处理一些事情：<ul><li>.stop - 调用 event.stopPropagation()</li><li>.prevent - 调用 event.preventDefault()</li><li>.{ keyCode | keyAlias } - 只当事件是从特定键触发时才触发回调</li><li>.native - 监听组件根元素的原生事件</li><li>.once - 只触发一次回调</li></ul></li></ul><h2 id="一、停止事件冒泡：-stop"><a href="#一、停止事件冒泡：-stop" class="headerlink" title="一、停止事件冒泡：.stop"></a>一、停止事件冒泡：.stop</h2><p>事件由子元素传递到父元素的过程，叫做事件冒泡</p><p>阻止事件冒泡，可以在 click 后面加上 .stop</p><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 停止冒泡 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click.stop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doThis<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="二、阻止默认事件：-prevent"><a href="#二、阻止默认事件：-prevent" class="headerlink" title="二、阻止默认事件：.prevent"></a>二、阻止默认事件：.prevent</h2><p>例如点击链接 <a> 的默认行为就是跳转，叫做默认事件</p><p>取消默认事件，可以在 click 后面加上 .prevent</p><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 阻止默认行为 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click.prevent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doThis<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 阻止默认行为，没有表达式 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>from</span> <span class="token attr-name">@submit.prevent</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>from</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="三、串联修饰符"><a href="#三、串联修饰符" class="headerlink" title="三、串联修饰符"></a>三、串联修饰符</h2><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 串联修饰符 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click.stop.prevent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doThis<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="四、键修饰符"><a href="#四、键修饰符" class="headerlink" title="四、键修饰符"></a>四、键修饰符</h2><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 键修饰符，键别名 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">@keyup.enter</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>onEnter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 键修饰符，键代码 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">@keyup.13</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>onEnter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、只触发一次点击事件：-once"><a href="#五、只触发一次点击事件：-once" class="headerlink" title="五、只触发一次点击事件：.once"></a>五、只触发一次点击事件：.once</h2><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click.once</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doThis<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>$route 和 $router 的区别</title>
      <link href="/2021/07/11/route-he-router-de-qu-bie/"/>
      <url>/2021/07/11/route-he-router-de-qu-bie/</url>
      
        <content type="html"><![CDATA[<h1 id="route-和-router-的区别"><a href="#route-和-router-的区别" class="headerlink" title="$route 和 $router 的区别"></a>$route 和 $router 的区别</h1><ul><li>区别如下：<ul><li>$router 为 VueRouter 实例，想要导航到不同 URL，则使用 $router.push 方法</li><li>$route 为当前 router 跳转对象里面，可以获取 name、path、query、params 等</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-router</title>
      <link href="/2021/07/11/vue-router/"/>
      <url>/2021/07/11/vue-router/</url>
      
        <content type="html"><![CDATA[<h1 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h1><h2 id="1、安装和使用-vue-router"><a href="#1、安装和使用-vue-router" class="headerlink" title="1、安装和使用 vue-router"></a>1、安装和使用 vue-router</h2><ul><li>步骤一：安装 vue-router<ul><li>npm install vue-router –save</li></ul></li><li>步骤二：在模块化工程中使用（因为是一个插件，所以可以通过 Vue.use() 来安装路由功能）<ul><li>第一步：导入路由对象，并且调用 Vue.use(VueRouter)</li><li>第二步：创建路由实例，并且传入路由映射配置</li><li>第三步：在 Vue 实例中挂载创建的路由实例</li></ul></li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// router 文件夹下的 index.js</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> VueRouter <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token keyword">import</span> Home <span class="token keyword">from</span> <span class="token string">'../components/home'</span><span class="token keyword">import</span> About <span class="token keyword">from</span> <span class="token string">'../components/about'</span><span class="token comment" spellcheck="true">// 1. 注入插件</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueRouter<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 2. 定义路由</span><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> <span class="token string">'/home'</span><span class="token punctuation">,</span>        component<span class="token punctuation">:</span> Home    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> <span class="token string">'/about'</span><span class="token punctuation">,</span>        component<span class="token punctuation">:</span> About    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// 3. 创建 router 实例</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    routes<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 4. 导出 router 实例</span><span class="token keyword">export</span> <span class="token keyword">default</span> router<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// main.js</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App'</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">'./router'</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    router<span class="token punctuation">,</span>    render<span class="token punctuation">:</span> h <span class="token operator">=</span><span class="token operator">></span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>使用 vue-router的步骤：</p><ul><li>第一步：创建路由组件</li><li>第二步：配置路由映射：组件和路径映射关系</li><li>第三步：使用路由：通过 <router-link> 和 <router-view> </li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>router<span class="token operator">-</span>link to<span class="token operator">=</span><span class="token string">"/home"</span><span class="token operator">></span>首页<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span>        <span class="token operator">&lt;</span>router<span class="token operator">-</span>link to<span class="token operator">=</span><span class="token string">"/about"</span><span class="token operator">></span>关于<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span>        <span class="token operator">&lt;</span>router<span class="token operator">-</span>view<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>view<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="2、路由的默认路径"><a href="#2、路由的默认路径" class="headerlink" title="2、路由的默认路径"></a>2、路由的默认路径</h2><ul><li>默认情况下，进入网站的首页，我们希望 <router-view> 渲染首页的内容</li><li>只需要多配置一个映射</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>        redirect<span class="token punctuation">:</span> <span class="token string">'/home'</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置解析：</p><ul><li><p>在 routes 中多配置了一个映射</p></li><li><p>path 配置的根路径：/ </p></li><li><p>redirect 是重定向，也就是我们将根路径重定向到 /home 的路径下</p></li></ul><h2 id="3、路由改变路径的方式"><a href="#3、路由改变路径的方式" class="headerlink" title="3、路由改变路径的方式"></a>3、路由改变路径的方式</h2><ul><li><p>改变路径的方式有两种：</p><ul><li>URL 的 hash</li><li>HTML5 的 history</li><li>默认情况下，路径的改变使用 URL 的 hash</li></ul></li><li><p>如果希望使用 HTML5 的 history 模式，进行如下配置：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    routes<span class="token punctuation">,</span>    mode<span class="token punctuation">:</span> <span class="token string">'history'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="4、router-link"><a href="#4、router-link" class="headerlink" title="4、router-link"></a>4、router-link</h2><ul><li><p><router-link> 的属性：</p><ul><li><p>to：用于指定跳转的路径</p></li><li><p>tag：tag 可以指定 <router-link> 之后渲染成什么组件，比如下面的代码会被渲染成一个 <li> 元素，而不是 <a></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>router<span class="token operator">-</span>link to<span class="token operator">=</span><span class="token string">'/home'</span> tag<span class="token operator">=</span><span class="token string">'li'</span><span class="token operator">></span>首页<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>replace：replace 不会留下 history 记录，所以指定 replace 的情况下，后退键返回不能返回到上一个页面中</p></li><li><p>active-class：当 <router-link> 对应的路由匹配成功时，会自动给当前元素设置一个 router-link-active 的 class，设置 active-class 可以修改默认的名称</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>router<span class="token operator">-</span>link to<span class="token operator">=</span><span class="token string">'/home'</span> active<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"active"</span><span class="token operator">></span>首页<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul><h2 id="5、路由代码跳转"><a href="#5、路由代码跳转" class="headerlink" title="5、路由代码跳转"></a>5、路由代码跳转</h2><ul><li><p>使用 JavaScript 代码进行页面的跳转</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"linkToHome"</span><span class="token operator">></span>首页<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>        <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"linkToAbout"</span><span class="token operator">></span>关于<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>        <span class="token operator">&lt;</span>router<span class="token operator">-</span>view<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>view<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token function">linkToHome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'/home'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">linkToAbout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'/about'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="6、动态路由"><a href="#6、动态路由" class="headerlink" title="6、动态路由"></a>6、动态路由</h2><ul><li>当一个页面的 path 路径可能不确定时，比如：<ul><li>/user/aaaa 或 /user/bbbb</li><li>除了有前面的 /user 之外，后面还跟上了用户的 ID</li><li>这种 path 和 Component 的匹配关系，我们称之为动态路由（也是路由传递数据的一种方式）</li></ul></li></ul><pre class="line-numbers language-javascript"><code class="language-javascript">routes <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> <span class="token string">'/user/:userId'</span>        component<span class="token punctuation">:</span> User    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    routes<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>router<span class="token operator">-</span>link <span class="token punctuation">:</span>to<span class="token operator">=</span><span class="token string">"'/user/'+userId"</span><span class="token operator">></span>用户<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span>        <span class="token operator">&lt;</span>router<span class="token operator">-</span>view<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>view<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">{</span>            userId<span class="token punctuation">:</span> <span class="token string">'lisi'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>h1<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>$route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>userId<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="7、路由懒加载"><a href="#7、路由懒加载" class="headerlink" title="7、路由懒加载"></a>7、路由懒加载</h2><ul><li>什么是路由懒加载？<ul><li>当打包构建应用时，JavaScript 包会变得非常大，影响页面加载</li><li>如果我们能把不同路由对应的组件分割成不同的代码块，如果当路由被访问的时候才加载对应组件，这样就更加高效</li></ul></li><li>路由懒加载做了什么？<ul><li>路由懒加载的主要作用就是将路由对应的组件打包成一个个 js 代码块</li><li>只有在这个路由被访问到的时候，才加载对应的组件</li></ul></li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 引用后直接使用</span><span class="token comment" spellcheck="true">// import Home from '../components/Home'</span><span class="token comment" spellcheck="true">// import About from '../components/About'</span><span class="token comment" spellcheck="true">// 路由懒加载</span><span class="token keyword">const</span> Home <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../components/Home.vue'</span><span class="token punctuation">)</span><span class="token keyword">const</span> About <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../components/Home.vue'</span><span class="token punctuation">)</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueRouter<span class="token punctuation">)</span><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> <span class="token string">'/home'</span><span class="token punctuation">,</span>        component<span class="token punctuation">:</span> Home    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> <span class="token string">'/about'</span><span class="token punctuation">,</span>        component<span class="token punctuation">:</span> About    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    routes<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> router<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8、路由嵌套"><a href="#8、路由嵌套" class="headerlink" title="8、路由嵌套"></a>8、路由嵌套</h2><ul><li>嵌套路由是一个很常见的功能<ul><li>比如在 home 页面中，我们希望通过 /home/news 和 home/message 访问一些内容</li><li>一个路径映射一个组件，访问这两个路径也会风别渲染两个组件</li></ul></li><li>实现嵌套路由有两个步骤：<ul><li>创建对应的子组件，并且在路由映射中配置对应的子路由</li><li>在组件内部使用 <router-view> 标签</li></ul></li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> Home <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../components/Home.vue'</span><span class="token punctuation">)</span><span class="token keyword">const</span> Message <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../components/Message.vue'</span><span class="token punctuation">)</span><span class="token keyword">const</span> News <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../components/Message.vue'</span><span class="token punctuation">)</span><span class="token keyword">const</span> About <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../components/Home.vue'</span><span class="token punctuation">)</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueRouter<span class="token punctuation">)</span><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> <span class="token string">'/home'</span><span class="token punctuation">,</span>        component<span class="token punctuation">:</span> Home<span class="token punctuation">,</span>        children<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>                path<span class="token punctuation">:</span> <span class="token string">'message'</span><span class="token punctuation">,</span>                component<span class="token punctuation">:</span> Message            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                path<span class="token punctuation">:</span> <span class="token string">'news'</span><span class="token punctuation">,</span>                component<span class="token punctuation">:</span> News            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 嵌套路由也可以配置默认的路径，配置方式如下:</span>            <span class="token punctuation">{</span>                path<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>                redirect<span class="token punctuation">:</span> <span class="token string">'message'</span>            <span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> <span class="token string">'/about'</span><span class="token punctuation">,</span>        component<span class="token punctuation">:</span> About    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    routes<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> router<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9、传递参数"><a href="#9、传递参数" class="headerlink" title="9、传递参数"></a>9、传递参数</h2><h3 id="1）参数的类型"><a href="#1）参数的类型" class="headerlink" title="1）参数的类型"></a>1）参数的类型</h3><ul><li><p>传递参数主要有两种类型：params 和 query</p></li><li><p>params 的类型：</p><ul><li>配置路由格式：/router/:id</li><li>传递的方式：在 path 后面跟上对应的值</li><li>传递后形成的路径：/router/123, /router/abc</li></ul></li><li><p>query 的类型：</p><ul><li>配置路由格式：/router, 也就是普通配置</li><li>传递的方式：对象中使用 query 的 key 作为传递方式</li><li>传递后形成的路径：/router?id=123, /router?id=abc </li></ul></li></ul><h3 id="2）传递参数的方式"><a href="#2）传递参数的方式" class="headerlink" title="2）传递参数的方式"></a>2）传递参数的方式</h3><ul><li><p><router-link> 的方式和 JavaScript 代码方式</p><ul><li><p>传递参数方式一：<router-link></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>router<span class="token operator">-</span>link to<span class="token operator">=</span><span class="token string">"/home"</span><span class="token operator">></span>首页<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span>        <span class="token operator">&lt;</span>router<span class="token operator">-</span>link to<span class="token operator">=</span><span class="token string">"/about"</span><span class="token operator">></span>关于<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span>        <span class="token operator">&lt;</span>router<span class="token operator">-</span>link             <span class="token punctuation">:</span>to<span class="token operator">=</span>"<span class="token punctuation">{</span>                path<span class="token punctuation">:</span> <span class="token string">'/profile/'</span> <span class="token operator">+</span> <span class="token number">123</span><span class="token punctuation">,</span>                query<span class="token punctuation">:</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'qq'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span>            <span class="token punctuation">}</span>"        <span class="token operator">></span>首页<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span>        <span class="token operator">&lt;</span>router<span class="token operator">-</span>view<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>view<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>传递参数方式二：JavaScript 代码</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token function">toProfile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                path<span class="token punctuation">:</span> <span class="token string">'/profile/'</span> <span class="token operator">+</span> <span class="token number">123</span><span class="token punctuation">,</span>                query<span class="token punctuation">:</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'qq'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="3）获取参数"><a href="#3）获取参数" class="headerlink" title="3）获取参数"></a>3）获取参数</h3><ul><li><p>获取参数通过 $route 对象获取</p><ul><li>在使用 vue-route 的应用中，路由对象会被注入每个组件中，赋值为 this.$route，并且当路由切换时，路由对象会被更新。</li></ul></li><li><p>通过 $route 获取传递的信息如下:</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>p<span class="token operator">></span>params<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>$route<span class="token punctuation">.</span>params<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>        <span class="token operator">&lt;</span>p<span class="token operator">></span>query<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>$route<span class="token punctuation">.</span>query<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="10、导航守卫"><a href="#10、导航守卫" class="headerlink" title="10、导航守卫"></a>10、导航守卫</h2><ul><li><p>什么是导航守卫</p><ul><li>vue-router 提供的导航守卫主要用来监听路由的进入和离开</li><li>vue-router 提供了 beforeEach 和 afterEach 的钩子函数，它们会在路由即将改变前和改变后触发</li></ul></li><li><p>导航守卫的使用</p><ul><li>可以利用 beforeEach 来完成标题的修改<ul><li>首先，可以在路由当中定义一些标题，可以利用 meta 来定义</li><li>其次，利用导航守卫，修改标题</li></ul></li><li>导航钩子的三个参数解析：<ul><li>to：即将要进入的目标的路由对象</li><li>from：当前导航即将要离开的路由对象</li><li>next：调用该方法后，才能进入下一个钩子</li></ul></li></ul></li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> <span class="token string">'/home'</span><span class="token punctuation">,</span>        component<span class="token punctuation">:</span> Home<span class="token punctuation">,</span>        meta<span class="token punctuation">:</span> <span class="token punctuation">{</span>            title<span class="token punctuation">:</span> <span class="token string">'首页'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> <span class="token string">'/about'</span><span class="token punctuation">,</span>        component<span class="token punctuation">:</span> About<span class="token punctuation">,</span>        meta<span class="token punctuation">:</span> <span class="token punctuation">{</span>            title<span class="token punctuation">:</span> <span class="token string">'首页'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> <span class="token string">'/profile/:id'</span><span class="token punctuation">,</span>        component<span class="token punctuation">:</span> Profile<span class="token punctuation">,</span>        meta<span class="token punctuation">:</span> <span class="token punctuation">{</span>            title<span class="token punctuation">:</span> <span class="token string">'档案'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    routes<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    window<span class="token punctuation">.</span>document<span class="token punctuation">.</span>title <span class="token operator">=</span> to<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>title    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> router<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>导航守卫补充<ul><li>补充一：如果是后置钩子 afterEach，不需要主动调用 next() 函数</li><li>补充二：上面使用的导航守卫称为全局守卫，除了全局守卫，还有：<ul><li>路由独享的守卫</li><li>组件内的守卫</li></ul></li></ul></li><li>vue 官网关于导航守卫的开发文档：<ul><li><a href="https://router.vuejs.org/zh/guide/advanced/navigation-guards.html">https://router.vuejs.org/zh/guide/advanced/navigation-guards.html</a></li></ul></li></ul><h2 id="11、keep-alive"><a href="#11、keep-alive" class="headerlink" title="11、keep-alive"></a>11、keep-alive</h2><ul><li><p>keep-alive 是 vue 内置的一个组件，可以使被包含的组件保留状态，或避免重新渲染</p><ul><li>keep-alive 两个非常重要的属性：<ul><li>include - 字符串或正则表达式，只有匹配的组件会被缓存</li><li>exclude - 字符串或正则表达式，任何匹配的组件都不会被缓存</li></ul></li></ul></li><li><p>router-view 也是一个组件，如果直接被包在 keep-alive 里面，所有路径匹配到的视图组件都会被缓存：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>keep<span class="token operator">-</span>alive<span class="token operator">></span>    <span class="token operator">&lt;</span>router<span class="token operator">-</span>view<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 所有路径匹配到的视图组件都会被缓存！ <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>view<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>keep<span class="token operator">-</span>alive<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一维数组变二维数组的实现</title>
      <link href="/2021/07/09/yi-wei-shu-zu-bian-er-wei-shu-zu-de-shi-xian/"/>
      <url>/2021/07/09/yi-wei-shu-zu-bian-er-wei-shu-zu-de-shi-xian/</url>
      
        <content type="html"><![CDATA[<ul><li>在做外卖项目的时候遇到从后台拿到一维数组的数据，要将一维数组转为二维数组实现商品列表轮播图效果。</li><li>今天笔试又遇到类似的题目。</li><li>记录一下代码及思路。</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 一维数组</span><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token keyword">function</span> <span class="token function">changeArr</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 空的二维数组</span>    <span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">// 空的二维数组里的一维数组</span>    <span class="token keyword">let</span> minArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">// 遍历一维数组</span>    arr1<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>c <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果当前小数组已满，创建一个新的小数组</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>minArr<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 重新创建一个数组，相当于再内存中再开辟一块空间</span>            minArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 如果 minArr 当前是空的，将小数组保存到大数组中</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>minArr<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            arr2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>minArr<span class="token punctuation">)</span>        <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 将值放入小数组中</span>        minArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> arr2<span class="token punctuation">}</span><span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token function">changeArr</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 一维数组</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 二维数组</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript</title>
      <link href="/2021/07/02/typescripe/"/>
      <url>/2021/07/02/typescripe/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章：TypeScript"><a href="#第一章：TypeScript" class="headerlink" title="第一章：TypeScript"></a>第一章：TypeScript</h1><h2 id="1、Typescript-开发环境搭建"><a href="#1、Typescript-开发环境搭建" class="headerlink" title="1、Typescript 开发环境搭建"></a>1、Typescript 开发环境搭建</h2><ol><li>下载 Node.js</li><li>安装 Node.js</li><li>使用 npm 全局安装 typescript<ul><li>进入命令行</li><li>输入：npm i -g typescript</li></ul></li><li>创建一个 ts 文件</li><li>使用 tsc 对 ts 文件进行编译<ul><li>进入命令行</li><li>进入 ts 文件所在目录</li><li>执行命令：tsc xxx.ts</li></ul></li></ol><h2 id="2、基本类型"><a href="#2、基本类型" class="headerlink" title="2、基本类型"></a>2、基本类型</h2><ul><li><p>类型声明</p><ul><li><p>类型声明是 TS 非常重要的一个特点</p></li><li><p>通过类型声明可以指定 TS 中变量（参数、形参）的类型</p></li><li><p>指定类型后，当为变量赋值时，TS 编辑器会自动检查值是否符合类型声明，符合则赋值，否则报错</p></li><li><p>简而言之，类型声明给变量设置了类型，使得变量只能存储某种类型的值</p></li><li><p>语法：</p><ul><li><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">let</span> 变量<span class="token punctuation">:</span> 类型<span class="token punctuation">;</span><span class="token keyword">let</span> 变量<span class="token punctuation">:</span> 类型 <span class="token operator">=</span> 值<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>参数<span class="token punctuation">:</span> 类型<span class="token punctuation">,</span> 参数<span class="token punctuation">:</span> 类型<span class="token punctuation">)</span><span class="token punctuation">:</span> 类型<span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li><li><p>自动类型判断</p><ul><li>TS 拥有自动的类型判断机制</li><li>当对变量的声明和赋值是同时进行的，TS 编译器会自动判断变量的类型</li><li>所以如果你的变量的声明和赋值同时进行的，可以省略掉类型声明</li></ul></li><li><p>类型：</p><table><thead><tr><th align="center">类型</th><th align="center">例子</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">number</td><td align="center">1, -33, 2.5</td><td align="center">任意数字</td></tr><tr><td align="center">string</td><td align="center">‘hi’, “hi”, hi</td><td align="center">任意字符串</td></tr><tr><td align="center">boolean</td><td align="center">true、false</td><td align="center">布尔值 true 或 false</td></tr><tr><td align="center">字面量</td><td align="center">其本身</td><td align="center">限制变量的值就是该字面量的值</td></tr><tr><td align="center">any</td><td align="center">*</td><td align="center">任意类型</td></tr><tr><td align="center">unknown</td><td align="center">*</td><td align="center">类型安全的 any</td></tr><tr><td align="center">void</td><td align="center">空值（undefined）</td><td align="center">没有值（或 undefined）</td></tr><tr><td align="center">never</td><td align="center">没有值</td><td align="center">不能是任何值</td></tr><tr><td align="center">object</td><td align="center">{name: ‘孙悟空’}</td><td align="center">任意的 JS 对象</td></tr><tr><td align="center">array</td><td align="center">[1, 2, 3]</td><td align="center">任意 JS 数组</td></tr><tr><td align="center">tuple</td><td align="center">[4, 5]</td><td align="center">元素，TS 新增类型，固定长度数组</td></tr><tr><td align="center">enum</td><td align="center">enum{A, B}</td><td align="center">枚举，TS 中新增类型</td></tr></tbody></table></li><li><p>number</p><ul><li><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">let</span> decimal<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token keyword">let</span> hex<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">0xf00d</span><span class="token punctuation">;</span><span class="token keyword">let</span> binary<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">0b1010</span><span class="token punctuation">;</span><span class="token keyword">let</span> octal<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">0o744</span><span class="token punctuation">;</span><span class="token keyword">let</span> big<span class="token punctuation">:</span> bigint <span class="token operator">=</span> 100n<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>boolean</p><ul><li><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">let</span> isDone<span class="token punctuation">:</span> <span class="token keyword">boolean</span> <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>string</p><ul><li><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">let</span> color<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">=</span> <span class="token string">"bule"</span><span class="token punctuation">;</span>color <span class="token operator">=</span> <span class="token string">'red'</span><span class="token punctuation">;</span><span class="token keyword">let</span> fullName<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">=</span> <span class="token template-string"><span class="token string">`Bob Bobbington`</span></span><span class="token punctuation">;</span><span class="token keyword">let</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">37</span><span class="token punctuation">;</span><span class="token keyword">let</span> sentence<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">=</span> <span class="token template-string"><span class="token string">`Hello, my name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>fullName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.I will be </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>age <span class="token operator">+</span> <span class="token number">1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> years old next month.`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>字面量</p><ul><li><p>也可以使用字面量去指定变量的类型，通过字面量可以确定变量的取值范围</p></li><li><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">let</span> color<span class="token punctuation">:</span> <span class="token string">'red'</span> <span class="token operator">|</span> <span class="token string">'blue'</span> <span class="token operator">|</span> <span class="token string">'black'</span><span class="token punctuation">;</span><span class="token keyword">let</span> num<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">2</span> <span class="token operator">|</span> <span class="token number">3</span> <span class="token operator">|</span> <span class="token number">4</span> <span class="token operator">|</span> <span class="token number">5</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p>any</p><ul><li><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">let</span> d<span class="token punctuation">:</span> <span class="token keyword">any</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>d <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token punctuation">;</span>d <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>unknown</p><ul><li><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">let</span> notSure<span class="token punctuation">:</span> unknown <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>notSure <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p>void</p><ul><li><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">let</span> unusable<span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token operator">=</span> undefined<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>never</p><ul><li><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">error</span><span class="token punctuation">(</span>message<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span> never<span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>object ( 没啥用 )</p><ul><li><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">let</span> obj<span class="token punctuation">:</span> object <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>array</p><ul><li><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">let</span> list<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> list<span class="token punctuation">:</span> <span class="token keyword">Array</span><span class="token operator">&lt;</span><span class="token keyword">number</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p>tuple</p><ul><li><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">let</span> x<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">number</span><span class="token punctuation">]</span><span class="token punctuation">;</span>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p>enum</p><ul><li><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">enum</span> Color <span class="token punctuation">{</span>    Red<span class="token punctuation">,</span>    Green<span class="token punctuation">,</span>    Blue<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">let</span> c<span class="token punctuation">:</span> Color <span class="token operator">=</span> Color<span class="token punctuation">.</span>Green<span class="token punctuation">;</span><span class="token keyword">enum</span> Color <span class="token punctuation">{</span>    Red <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>    Green<span class="token punctuation">,</span>    Blue<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">let</span> c<span class="token punctuation">:</span> Color <span class="token operator">=</span> color<span class="token punctuation">.</span>Green<span class="token punctuation">;</span><span class="token keyword">enum</span> Color<span class="token punctuation">{</span>    Red <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>    Green <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>    Blue <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">let</span> c<span class="token punctuation">:</span> Color <span class="token operator">=</span> Color<span class="token punctuation">.</span>Green<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>类型断言</p><ul><li><p>有些情况下，变量的类型对于我们来说是很明确，但是 TS 编译器却不清楚，此时，可以通过类型断言来告诉编译器变量的类型，断言有两种形式：</p><ul><li><p>第一种</p><ul><li><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">let</span> someValue<span class="token punctuation">:</span> unknown <span class="token operator">=</span> <span class="token string">"this is a string"</span><span class="token punctuation">;</span><span class="token keyword">let</span> strLength<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token punctuation">(</span>someValue as <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p>第二种</p><ul><li><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">let</span> someValue<span class="token punctuation">:</span> unknown <span class="token operator">=</span> <span class="token string">"this is a string"</span><span class="token punctuation">;</span><span class="token keyword">let</span> strLength<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span>someValue<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li></ul></li></ul></li></ul><h2 id="3、编译选项"><a href="#3、编译选项" class="headerlink" title="3、编译选项"></a>3、编译选项</h2><ul><li><p>自动编译文件</p><ul><li><p>编译文件时，使用 -w 指令后，TS 编译器会自动监视文件的变化，并在文件发生变化时对文件重新编译。</p></li><li><p>实例：</p><ul><li><pre class="line-numbers language-typescript"><code class="language-typescript">tsc xxx<span class="token punctuation">.</span>ts <span class="token operator">-</span>w<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul></li><li><p>自动编译整个项目</p><ul><li><p>如果直接使用 tsc 指令，则可以自动将当前项目下的所有 ts 文件编译为 js 文件。</p></li><li><p>但是能直接使用 tsc 命令的前提时，要先在项目根目录下创建一个 ts 的配置文件 tsconfig.json</p></li><li><p>tsconfig.json 是一个 JSON 文件，添加配置文件后，只需 tsc 命令即可完成对整个项目的编译</p></li><li><p>配置选项：</p><ul><li><p>include</p><ul><li><p>定义希望被编译文件所在的目录</p></li><li><pre class="line-numbers language-json"><code class="language-json">默认值：<span class="token punctuation">[</span><span class="token string">"**/*"</span><span class="token punctuation">]</span>//路径：** 表示任意目录//      * 表示任意文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>示例：</p><ul><li><pre class="line-numbers language-json"><code class="language-json"><span class="token property">"include"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"src/**/*"</span><span class="token punctuation">,</span> <span class="token string">"tests/**/*"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>上述示例中，所有 src 目录和 tests 目录下的文件都会被编译</p></li></ul></li></ul></li><li><p>exclude</p><ul><li><p>定义需要排除在外的目录</p></li><li><p>默认值：[“node_modules”, “bower_components”, “jspm_packages”]</p></li><li><p>示例：</p><ul><li><pre class="line-numbers language-json"><code class="language-json"><span class="token property">"exclude"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"./src/hello/**/*"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>上述示例中，src 下 hello 目录下的文件都不会被编译</p></li></ul></li></ul></li><li><p>extends</p><ul><li><p>定义被编译的配置文件</p></li><li><p>示例：</p><ul><li><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token string">"extends"</span><span class="token punctuation">:</span> <span class="token string">"./configs/base"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>上述示例中，当前配置文件中会自动包含 config 目录下 base.json 中的所有配置信息</p></li></ul></li></ul></li><li><p>files</p><ul><li><p>指定被编译文件的列表，只有需要编译的文件少时才会用到</p></li><li><p>示例：</p><ul><li><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token string">"files"</span><span class="token punctuation">:</span><span class="token punctuation">[</span>    <span class="token string">"core.ts"</span><span class="token punctuation">,</span>    <span class="token string">"sys.ts"</span><span class="token punctuation">,</span>    <span class="token string">"types.ts"</span><span class="token punctuation">,</span>    <span class="token string">"scanner.ts"</span><span class="token punctuation">,</span>    <span class="token string">"parser.ts"</span><span class="token punctuation">,</span>    <span class="token string">"utilities.ts"</span><span class="token punctuation">,</span>    <span class="token string">"binder.ts"</span><span class="token punctuation">,</span>    <span class="token string">"checker.ts"</span><span class="token punctuation">,</span>    <span class="token string">"tsc.ts"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>列表中的文件都会被 TS 编译器所编译</p></li></ul></li></ul></li><li><p>compilerOptions</p><ul><li><p>编译选项是配置文件中非常重要也比较复杂的配置选项</p></li><li><p>在 compilerOptions 中包含多个子选项，用来完成对编译的配置</p><ul><li><p>项目选项</p><ul><li><p>target</p><ul><li><p>设置 ts 代码编译的目标版本</p></li><li><p>可选值：</p><ul><li>ES3（默认）、ES5、ES6/ES2015、ES7/ES2016、ES2017、ES2018、ES2019、ES2020、ESNext</li></ul></li><li><p>示例：</p><ul><li><pre class="line-numbers language-json"><code class="language-json"><span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"target"</span><span class="token operator">:</span> <span class="token string">"ES6"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>如上设置，我们编写的 ts 代码将会编译为 ES6 版本的 js 代码</p></li></ul></li></ul></li><li><p>lib</p><ul><li><p>指定代码运行时所包含的库（宿主环境）</p></li><li><p>可选值：</p><ul><li>ES5、ES6/ES2015、ES7/ES2016、ES2017、ES2018、ES2019、ES2020、ESNext、DOM、WebWorker、ScriptHost ……</li></ul></li><li><p>示例：</p><ul><li><pre class="line-numbers language-json"><code class="language-json"><span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"target"</span><span class="token operator">:</span> <span class="token string">"ES6"</span><span class="token punctuation">,</span>    <span class="token property">"lib"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"ES6"</span><span class="token punctuation">,</span> <span class="token string">"DOM"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"outDir"</span><span class="token operator">:</span> <span class="token string">"dist"</span><span class="token punctuation">,</span>    <span class="token property">"outFile"</span><span class="token operator">:</span> <span class="token string">"dist/aa.js"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li><li><p>module</p><ul><li><p>设置编码后代码使用的模块化系统</p></li><li><p>可选值：</p><ul><li>CommonJS、UMD、AMD、System、ES2020、ESNext、None</li></ul></li><li><p>示例：</p><ul><li><pre class="line-numbers language-json"><code class="language-json"><span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"module"</span><span class="token operator">:</span> <span class="token string">"CommonJS"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li><li><p>outDir</p><ul><li><p>编译后文件的所在目录</p></li><li><p>默认情况下，编译后的 js 文件位于相同的目录，设置 outDir 后可以改变编译后文件的位置</p></li><li><p>示例：</p><ul><li><pre class="line-numbers language-json"><code class="language-json"><span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"outDir"</span><span class="token operator">:</span> <span class="token string">"dist"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>设置后编译后的 js 文件将会生成到 dist 目录</p></li></ul></li></ul></li><li><p>outFile</p><ul><li><p>将所有的文件编译为一个 js 文件</p></li><li><p>默认会将所有编写在全局作用域中的代码合并为一个 js 文件，如果 module 制定了 None、System 或 AMD 则会将模块一起合并到文件之中</p></li><li><p>示例：</p><ul><li><pre class="line-numbers language-json"><code class="language-json"><span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"outFile"</span><span class="token operator">:</span> <span class="token string">"dist/app.js"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li><li><p>rootDir</p><ul><li><p>指定代码的根目录，默认情况下编译后文件的目录结构会以最长的公共目录为根目录，通过 rootDir 可以手动指定根目录</p></li><li><p>示例：</p><ul><li><pre class="line-numbers language-json"><code class="language-json"><span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"rootDir"</span><span class="token operator">:</span> <span class="token string">"./src"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li><li><p>allowJs</p><ul><li>是否对 js 文件编译</li></ul></li><li><p>checkJs</p><ul><li><p>是否对 js 文件进行检查</p></li><li><p>示例：</p><ul><li><pre class="line-numbers language-json"><code class="language-json"><span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"allowJs"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"checkJs"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li><li><p>removeComments</p><ul><li>是否删除注释</li><li>默认值：false</li></ul></li><li><p>noEmit</p><ul><li>不对代码就行编译</li><li>默认值：false</li></ul></li><li><p>sourceMap</p><ul><li>是否生成 sourceMap</li><li>默认值：false</li></ul></li><li><p>严格检查</p><ul><li>strict<ul><li>启用所有的严格检查，默认值为 true，设置后相当于开启了所有的严格检查</li></ul></li><li>alwaysStrict<ul><li>总是以严格模式对代码进行编译</li></ul></li><li>noImplicitAny<ul><li>禁止隐式的 any 类型</li></ul></li><li>noImplicitThis<ul><li>禁止类型不明确的 this</li></ul></li><li>strictBindCallApply<ul><li>严格检查 bind、call 和 apply 的参数列表</li></ul></li><li>strictFunctionTypes<ul><li>严格检查函数的类型</li></ul></li><li>strictNullChecks<ul><li>严格的空值检查</li></ul></li><li>strictPropertyInitialization<ul><li>严格检查属性是否初始化</li></ul></li></ul></li><li><p>额外检查</p><ul><li>noFallthroughCasesInSwitch<ul><li>检查 switch 语句包含正确的 break</li></ul></li><li>noImplicitReturns<ul><li>检查函数没有隐式的返回值</li></ul></li><li>noUnusedLocals<ul><li>检查未使用的局部变量</li></ul></li><li>noUnusedParameters<ul><li>检查未使用的参数</li></ul></li></ul></li><li><p>高级</p><ul><li>allowUnreachableCode<ul><li>检查不可达代码</li><li>可选值：<ul><li>true，忽略不可达代码</li><li>false，不可达代码将引起错误</li></ul></li></ul></li><li>noEmitOnError<ul><li>有错误的情况下不进行编译</li><li>默认值：false</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><h2 id="4、TypeScript-打包"><a href="#4、TypeScript-打包" class="headerlink" title="4、TypeScript 打包"></a>4、TypeScript 打包</h2><h3 id="webpack-整合"><a href="#webpack-整合" class="headerlink" title="webpack 整合"></a>webpack 整合</h3><p>通常情况下，实际开发中我们都需要使用构建工具对代码进行打包；</p><p>TS 同样也可以结合构建工具一起使用，下边以 webpack 为例介绍一下如何结合构建工具使用TS；</p><p>步骤如下：</p><ul><li><p><strong>初始化项目</strong></p><ul><li>进入项目根目录，执行命令 npm init -y，创建 package.json 文件</li></ul></li><li><p><strong>下载构建工具</strong></p><ul><li><p>命令如下：</p><pre class="line-numbers language-powershell"><code class="language-powershell">npm i <span class="token operator">-</span>D webpack webpack<span class="token operator">-</span><span class="token function">cli</span> webpack<span class="token operator">-</span>dev<span class="token operator">-</span>server typescript ts<span class="token operator">-</span>loader clean<span class="token operator">-</span>webpack<span class="token operator">-</span>plugin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>共安装了 7 个包</p><ul><li>webpack：构建工具 webpack</li><li>webpack-cli：webpack 的命令行工具</li><li>webpack-dev-server：webpack 的开发服务器</li><li>typescript：ts 编译器</li><li>ts-loader：ts 加载器，用于在 webpack 中编译 ts 文件</li><li>html-webpack-plugin：webpack 中 html 插件，用来自动创建 html 文件</li><li>clean-webpack-plugin：webpack 中的清除插件，每次构建都会先清除目录</li></ul></li></ul></li><li><p><strong>配置 webpack</strong></p><ul><li><p>根目录下创建 webpack 的配置文件 webpack.config.js：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"html-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">{</span> CleanWebpackPlugin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"clean-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    optimization<span class="token punctuation">:</span> <span class="token punctuation">{</span>        minimize<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token comment" spellcheck="true">// 关闭代码压缩，可选</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 指定入口文件</span>    entry<span class="token punctuation">:</span> <span class="token string">"./src/index.ts"</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 指定打包文件所在目录</span>    output<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 指定打包文件的目录</span>        path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 打包后文件的名字</span>        filename<span class="token punctuation">:</span> <span class="token string">"bundle.js"</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 告诉 webpack 不使用箭头函数，可选</span>        environment<span class="token punctuation">:</span> <span class="token punctuation">{</span>            arrowFunction<span class="token punctuation">:</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 指定 webpack 打包时要使用的模块</span>    module<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 指定要加载的规则</span>        rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// test 指定的是规则生效的文件</span>                test<span class="token punctuation">:</span> <span class="token regex">/\.ts$/</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">// 要使用的 loader</span>                use<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    loader<span class="token punctuation">:</span> <span class="token string">"ts-loader"</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">// 要排除的文件</span>                exclude<span class="token punctuation">:</span> <span class="token regex">/node_modules/</span>            <span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 配置 webpack 插件</span>    plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// title: '这是一个自定义的 title'</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 用来设置引用模块</span>    resolve<span class="token punctuation">:</span> <span class="token punctuation">{</span>        extensions<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'.ts'</span><span class="token punctuation">,</span> <span class="token string">'.js'</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>配置 TS 编译选项</strong></p><ul><li><p>根目录下使用 tsc –init 创建 tsconfig.json，配置可以根据自己需要</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>   <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>       <span class="token property">"target"</span><span class="token operator">:</span> <span class="token string">"es6"</span><span class="token punctuation">,</span>       <span class="token property">"module"</span><span class="token operator">:</span> <span class="token string">"es6"</span><span class="token punctuation">,</span>       <span class="token property">"strict"</span><span class="token operator">:</span> <span class="token boolean">true</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>修改 package.json 配置</strong></p><ul><li><p>修改 package.json 添加如下配置</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>   ...   <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>       <span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span><span class="token punctuation">,</span>       <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"webpack"</span><span class="token punctuation">,</span>       <span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"webpack serve --open chrome.exe"</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   ...<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>项目使用</strong></p><ul><li>在 src 下创建 ts 文件，并在命令行执行 npm run build 对代码进行编译；</li><li>或者执行 npm start 来启动开发服务器；</li></ul></li></ul><h3 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h3><p>除了 webpack，开发中还经常需要结合 babel 来对代码进行转换；</p><p>以使其可以兼容到更多的浏览器，在上述步骤的基础上，通过一下步骤再将 babel 引入到项目中；</p><blockquote><p>虽然TS在编译时也支持代码转换，但是只支持简单的代码转换；</p><p>对于例如：Promise等ES6特性，TS无法直接转换，这时还要用到babel来做转换；</p></blockquote><ul><li><p>安装依赖包：</p><pre class="line-numbers language-powershell"><code class="language-powershell">npm i <span class="token operator">-</span>D @babel<span class="token operator">/</span>core @babel<span class="token operator">/</span>preset<span class="token operator">-</span>env babel<span class="token operator">-</span>loader core<span class="token operator">-</span>js<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>共安装了 4 个包，分别是：<ul><li>@babel/core：babel 的核心工具</li><li>@babel/preset-env：babel 的预定义环境</li><li>@babel-loader：babel 在 webpack 中的加载器</li><li>core-js：core-js 用来使老版本的浏览器支持新版 ES 语法</li></ul></li></ul></li><li><p>修改 webpack.config.js 配置文件</p><pre class="line-numbers language-json"><code class="language-json">...// 指定 webpack 打包时要使用的模块module<span class="token operator">:</span> <span class="token punctuation">{</span>    // 指定要加载的规则    rules<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>        // test 指定的是规则生效的文件        test<span class="token operator">:</span> /\.ts$/<span class="token punctuation">,</span>        // 要使用的 loader        use<span class="token operator">:</span> <span class="token punctuation">[</span>            // 配置 babel            <span class="token punctuation">{</span>                // 指定加载器                loader<span class="token operator">:</span> <span class="token string">"babel-loader"</span><span class="token punctuation">,</span>                // 设置 babel                options<span class="token operator">:</span> <span class="token punctuation">{</span>                    // 设置预定义的环境                    presets<span class="token operator">:</span> <span class="token punctuation">[</span>                        <span class="token punctuation">[</span>                            // 指定环境的插件                            <span class="token string">"@babel/presets-env"</span><span class="token punctuation">,</span>                            // 配置信息                            <span class="token punctuation">{</span>                                // 要兼容的目标浏览器                                targets<span class="token operator">:</span> <span class="token punctuation">{</span>                                    <span class="token property">"chrome"</span><span class="token operator">:</span> <span class="token string">"58"</span><span class="token punctuation">,</span>                                    <span class="token property">"ie"</span><span class="token operator">:</span> <span class="token string">"11"</span>                                <span class="token punctuation">}</span><span class="token punctuation">,</span>                                                                // 指定 corejs 的版本                                <span class="token property">"corejs"</span><span class="token operator">:</span> <span class="token string">"3"</span><span class="token punctuation">,</span>                                // 使用 corejs 的方式 <span class="token string">"usage"</span> 表示按需加载                                <span class="token property">"useBuiltIns"</span><span class="token operator">:</span> <span class="token string">"usage"</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">]</span>                    <span class="token punctuation">]</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            'ts-loader'<span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        // 要排除的文件        exclude<span class="token operator">:</span> /node_modules/    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span>...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如此一来，使用 ts 编译后的文件将会再次被 babel 处理；</p><p>使得代码可以在大部分浏览器中直接使用；</p><p>同时可以在配置选项的 targets 中指定要兼容的浏览器版本；</p></li></ul><h2 id="5、面向对象"><a href="#5、面向对象" class="headerlink" title="5、面向对象"></a>5、面向对象</h2><p>1、类（class）</p><p>要想面向对象，操作对象，首先便要拥有对象，那么下一个问题就是如何创建对象。要创建对象，必须要先定义类，所谓的类可以理解为对象的模型。程序中可以根据类创建指定类型的对象。</p><p>举例来说：可以通过 Person 类来创建人的对象，通过 Dog 类创建狗的对象，通过 Car 类来创建汽车的对象，不同的类可以用来创建不同的对象。</p><ul><li><p><strong>定义类</strong></p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">class</span> 类名<span class="token punctuation">{</span>    属性名：类型；        <span class="token keyword">constructor</span><span class="token punctuation">(</span>参数：类型<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>属性名 <span class="token operator">=</span> 参数<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token function">方法名</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token operator">...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>    age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`大家好，我是</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用类：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'孙悟空'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>构造函数</strong></p><p>可以使用 constructor 定义一个构造器方法；</p><blockquote><p><strong>注1：在 TS 中只能有一个构造器方法！</strong></p></blockquote><p>例如：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>    age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>        <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时也可也直接将属性定义在构造函数中:</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token punctuation">{</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">public</span> name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">public</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面两种定义方法是完全相同的</p><blockquote><p><strong>注2：子类继承父类时，必须调用父类的构造方法（如果子类中也定义了构造方法）！</strong></p></blockquote><p>例如：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> num<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>num<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">=</span> num<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">X</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>num<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果在 X 类中不调用 super 将会报错！</p></li><li><p>封装</p><p>对象实质上就是属性和方法的容器，它是主要作用就是存储属性和方法，这就是所谓的封装</p><p>默认情况下，对象的属性是可以任意修改的，为了确保数据的安全性，在 TS 中可以对属性的权限进行设置</p><ul><li>静态属性（static）：<ul><li>声明为 static 的属性或方法不再属于实例，而是属于类的属性</li></ul></li><li>只读属性（readonly）：<ul><li>如果在声明属性时添加一个 readonly，则属性便成了只读属性无法修改</li></ul></li><li>TS 中属性具有三种修饰符：<ul><li>public（默认值），可以在类、子类和对象中修改</li><li>protected，可以再类、子类中修改</li><li>private，可以在类中修改</li></ul></li></ul><p>示例：</p><p>public：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 不写默认为 public</span>    <span class="token keyword">public</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>        <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 可以在类中修改</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`大家好，我是</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name <span class="token comment" spellcheck="true">// 子类中可以修改</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'孙悟空'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'猪八戒'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 可以通过对象修改</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>protected:</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>        <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 可以在类中修改</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`大家好，我是</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 子类中可以修改</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'孙悟空'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'猪八戒'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 不能修改</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>private：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> name<span class="token punctuation">:</span> stirng<span class="token punctuation">;</span>    <span class="token keyword">private</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>        <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 可以在类中修改</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`大家好，我是</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 子类中不能修改</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'孙悟空'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'猪八戒'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 不能修改</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>属性存取器</strong></p><p>对于一些不希望被任意修改的属性，可以将其设置为 private</p><p>直接将其设置为 private 将导致无法再通过对象修改其中的属性</p><p>我们可以再类中定义一组读取、设置属性的方法，这种对属性读取或设置的属性被称为属性的存取器</p><p>读取属性的方法叫做 setter 方法，设置属性的方法叫做 getter 方法</p><p>示例：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> _name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>        <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">get</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">set</span> <span class="token function">name</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'孙悟空'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 实际通过调用 getter 方法读取 name 属性</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 实际通过调用 setter 方法修改 name 属性</span>p1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'猪八戒'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>静态属性</strong></p><p>静态属性（方法），也称为类属性。使用静态属性无需创建实例，通过类即可直接使用</p><p>静态属性（方法）使用 static 开头</p><p>示例：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Tools</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> PI <span class="token operator">=</span> <span class="token number">3.1415926</span><span class="token punctuation">;</span>        <span class="token keyword">static</span> <span class="token function">sum</span><span class="token punctuation">(</span>num1<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> num2<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2    <span class="token punctuation">}</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Tools<span class="token punctuation">.</span>PI<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Tools<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">456</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>this</strong></p><p>在类中，使用 this 表示当前对象</p></li><li><p><strong>继承</strong></p><p>继承时面向对象中的又一个特性</p><p>通过继承可以将其他类中的属性和方法引入到当前类中</p><p>示例：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>    age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>        <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">在汪汪叫！`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">'旺财'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dog<span class="token punctuation">.</span><span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过继承可以在不修改类的情况下完成对类的扩展</p></li><li><p>重写</p><p>发生继承时，如果子类中的方法会替换掉父类中的同名方法，这就称为方法的重写</p><p>示例：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>    age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>        <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`父类中的 run 方法！`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>    <span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">在汪汪叫！`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`子类中的 run 方法，会重现父类中的 run 方法！`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`旺财`</span></span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dog<span class="token punctuation">.</span><span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在子类中可以使用 super 来完成对父类的引用</p><p>抽象类（abstract class）</p><p>抽象类是专门用来被其他类所继承的类，它只能被其他类所继承，不能用来创建实例</p><pre class="line-numbers language-typescript"><code class="language-typescript">abstract <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    abstract <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>    <span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'动物在叫~'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animals</span> <span class="token punctuation">{</span>    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'狗在跑~'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 abstract 开头的方法叫做抽象方法，抽象方法没有方法体只能定义在抽象类中，继承抽象类时抽象方法必须要实现；</p></li><li><p><strong>接口（Interface）</strong></p><p>接口的作用类似于抽象类，不同点在于：接口中的所有方法和属性都是没有实值的，换句话说接口中的所有方法都是抽象方法；</p><p>接口主要负责定义一个类的结构，接口可以去限制一个对象的接口：对象只有包含接口中定义的所有属性和方法时才能匹配接口；</p><p>同时，可以让一个类去实现接口，实现接口时类中要保护接口中的所有属性；</p><p>示例（检查对象类型）：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>    <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>per<span class="token punctuation">:</span> Person<span class="token punctuation">)</span> <span class="token punctuation">{</span>    per<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'孙悟空'</span><span class="token punctuation">,</span>     <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Hello, 我是 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例（实现）：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>    <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">public</span> name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>    <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'大家好，我是'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>泛型（Generic）</strong></p><p>定义一个函数或类时，有些情况下无法确定其中要使用的具体类型（返回值、参数、属性的类型不能确定）；</p><p>此时泛型便能够发挥作用；</p><p>举个例子：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span>arg<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">any</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> arg<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上例中，test 函数有一个参数类型不确定，但是能确定的是其返回值的类型和参数的类型是相同的；</p><p>由于类型不确定所以参数和返回值均使用了 any，但是很明显这样做是不合适的：</p><p>首先使用 any 会关闭 TS 的类型检查，其次这样设置也不能体现出参数和返回值是相同的类型；</p></li><li><p><strong>泛型函数</strong></p><ul><li><p>创建泛型函数</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">function</span> test<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> T<span class="token punctuation">{</span>    <span class="token keyword">return</span> arg<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里的 <T> 就是泛型；</p><p>T 是我们给这个类型起的名字（不一定非叫 T ），设置泛型后即可在函数中使用 T 来表示该类型；</p><p>所以泛型其实很好理解，就表示某个类型；</p><p>那么如何使用上边的函数呢？</p></li><li><p>使用泛型函数</p><ul><li><p>方式一（直接使用）：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用时可以直接传递参数使用，类型会由 TS 自动推断出来，但有时编译器无法自动推断时还需要使用下面的方式</p></li><li><p>方式二（指定类型）：</p><pre class="line-numbers language-typescript"><code class="language-typescript">test<span class="token operator">&lt;</span><span class="token keyword">number</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也可也在函数后手动指定泛型；</p></li></ul></li><li><p>函数中声明多个泛型</p><p>可以同时指定多个泛型，泛型间使用逗号隔开：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">function</span> test<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> K<span class="token operator">></span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> T<span class="token punctuation">,</span> b<span class="token punctuation">:</span> K<span class="token punctuation">)</span><span class="token punctuation">:</span> K <span class="token punctuation">{</span>    <span class="token keyword">return</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span>test<span class="token operator">&lt;</span><span class="token keyword">number</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>使用泛型时，完全可以将泛型当成是一个普通的类去使用；</p></li></ul></li><li><p><strong>泛型类</strong></p><p>除此之外，也可以对泛型的范围进行约束</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">MyInter</span> <span class="token punctuation">{</span>    length<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> test<span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">MyInter</span><span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> arg<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 T extends MyInter 表示泛型 T 必须是 MyInter 的子类，不一定非要使用接口类和抽象类同样适用；</p></li></ul><h2 id="6、贪吃蛇练习"><a href="#6、贪吃蛇练习" class="headerlink" title="6、贪吃蛇练习"></a>6、贪吃蛇练习</h2><p>使用 TypeScripe + Webpack + Less 实现贪吃蛇的例子</p><p><strong>项目依赖</strong></p><p>TypeScript：</p><ul><li>typescript</li><li>ts-loader</li></ul><p>Webpack：</p><ul><li>webpack</li><li>webpack-cli</li><li>webpack-dev-server</li><li>html-webpack-plugin</li><li>clean-webpack-plugin</li></ul><p>Babel</p><ul><li>core-js</li><li>babel-loader</li><li>@babel/core</li><li>@babel/preset-env</li></ul><p>Less &amp; CSS 资源</p><ul><li>style-loader</li><li>css-loader</li><li>less</li><li>less-loader</li><li>postcss</li><li>postcss-loader</li><li>postcss-preset-env</li></ul><p><strong>项目使用</strong></p><ul><li><p><strong>编译运行</strong></p><p>在确保已经正确安装 node 和 npm 的前提下：</p><p>分别执行下面的命令安装依赖并编译项目：</p><pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># 安装依赖</span>npm i<span class="token comment" spellcheck="true"># 编译打包</span>npm run build<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>编译完成后，使用浏览器打开 dist 目录下的 index.html 即可游玩；</p></li><li><p><strong>继续开发</strong></p><p>使用 npm run start 进入开发模型；</p><p>默认使用 Chrome 浏览器打开，可以修改 package.json 中的值：</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span><span class="token punctuation">,</span>        <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"webpack"</span><span class="token punctuation">,</span>        <span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"webpack serve --open chrome.exe"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vuex 的基本使用</title>
      <link href="/2021/06/29/vuex-de-ji-ben-shi-yong/"/>
      <url>/2021/06/29/vuex-de-ji-ben-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="VueX"><a href="#VueX" class="headerlink" title="VueX"></a>VueX</h1><h2 id="1-Vuex概述"><a href="#1-Vuex概述" class="headerlink" title="1.Vuex概述"></a>1.Vuex概述</h2><h3 id="1-1-组件之间共享数据的方式"><a href="#1-1-组件之间共享数据的方式" class="headerlink" title="1.1 组件之间共享数据的方式"></a>1.1 组件之间共享数据的方式</h3><p>父向子传值：v-bind 属性绑定</p><p>子向夫传值：v-on 事件绑定</p><p>兄弟组件之间共享数据：EventBus</p><ul><li>$on 接收数据的那个组件</li><li>$emit 发送数据的那个组件</li></ul><h3 id="1-2-Vuex是什么"><a href="#1-2-Vuex是什么" class="headerlink" title="1.2 Vuex是什么"></a>1.2 Vuex是什么</h3><p>Vuex 是实现组件全局状态（数据）管理的一种机制，可以方便的实现组件之间的共享</p><h2 id="2-Vuex-的基本使用"><a href="#2-Vuex-的基本使用" class="headerlink" title="2.Vuex 的基本使用"></a>2.Vuex 的基本使用</h2><ol><li>安装 vuex 依赖包</li></ol><pre class="line-numbers language-javascript"><code class="language-javascript">npm install vuex <span class="token operator">--</span>save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>导入 vuex 包</li></ol><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="3"><li>创建 store 对象</li></ol><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// state 中存放的就是全局共享的数据</span>    state<span class="token punctuation">:</span><span class="token punctuation">{</span> count<span class="token punctuation">:</span><span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>将 store 对象挂载到 vue 实例中</li></ol><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>    render<span class="token punctuation">:</span>h<span class="token operator">=</span><span class="token operator">></span><span class="token function">h</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">,</span>    router<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 将创建的共享数据对象，挂载到 Vue 实例中</span>    <span class="token comment" spellcheck="true">// 所有的组件，就可以直接从 store 中获取全局的数据了</span>    store<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-Vuex-的核心概念"><a href="#3-Vuex-的核心概念" class="headerlink" title="3.Vuex 的核心概念"></a>3.Vuex 的核心概念</h2><h3 id="3-1-核心概念概述"><a href="#3-1-核心概念概述" class="headerlink" title="3.1 核心概念概述"></a>3.1 核心概念概述</h3><p>Vuex 中的主要核心概念如下：</p><ul><li>State</li><li>Mutation</li><li>Action</li><li>Getter</li><li>Module</li></ul><h3 id="3-2-State"><a href="#3-2-State" class="headerlink" title="3.2 State"></a>3.2 State</h3><p>State 提供唯一的公共数据源，所有共享的数据都要统一放到 Store 的 State 中进行存储。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 创建 store 数据源，提供唯一公共数据</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    state<span class="token punctuation">:</span><span class="token punctuation">{</span> count<span class="token punctuation">:</span><span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>组件访问State中数据的第一种方式：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>全局数据名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>组件访问State中数据的第二种方式：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 1. 从 vuex 中按需导入 mapState 函数</span><span class="token keyword">import</span> <span class="token punctuation">{</span> mapState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>通过刚才导入的 mapState 函数，将当前组件需要的全局数据，映射为当前组件的 computed 计算属性：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 2. 将全局数据，映射为当前组件的计算属性</span>computed<span class="token punctuation">:</span><span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'count'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-Mutation"><a href="#3-3-Mutation" class="headerlink" title="3.3 Mutation"></a>3.3 Mutation</h3><p>Mutation 用于变更 Store 中的数据。</p><ol><li>只能通过 mutation 变更 Store 数据，不可以直接操作 Store 中的数据。</li><li>通过这种方式虽然操作起来稍微繁琐一些，但是可以集中监控所有数据的变化。</li></ol><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 定义 Mutation</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    state<span class="token punctuation">:</span><span class="token punctuation">{</span>        count<span class="token punctuation">:</span><span class="token number">0</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    mutation<span class="token punctuation">:</span><span class="token punctuation">{</span>        <span class="token function">add</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 变更状态</span>            state<span class="token punctuation">.</span>count<span class="token operator">++</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 触发 mutation</span>method<span class="token punctuation">:</span><span class="token punctuation">{</span>    <span class="token function">handle1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 触发 mutations 的第一种方式</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'add'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以在触发 mutations 时传递参数：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 定义 Mutation</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    state<span class="token punctuation">:</span><span class="token punctuation">{</span>        count<span class="token punctuation">:</span><span class="token number">0</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    mutations<span class="token punctuation">:</span><span class="token punctuation">{</span>        <span class="token function">addN</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span>step<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 变更状态</span>            state<span class="token punctuation">.</span>count <span class="token operator">+</span><span class="token operator">=</span> step        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 触发 mutation</span>methods<span class="token punctuation">:</span><span class="token punctuation">{</span>    <span class="token function">handle2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 在调用 commit 函数，</span>        <span class="token comment" spellcheck="true">// 触发 mutations 是携带参数</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'addN'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>this.$store.commit() 是触发 mutations 的第一种方式，触发 mutations 的第二种方式：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 1. 从 vuex 中按需导入 mapMutations 函数</span><span class="token keyword">import</span> <span class="token punctuation">{</span> mapMutations <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>通过刚才导入的 mapMutations 函数，将需要的mutations函数，映射为当前组件的 methods 方法：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 2. 将指定的 mutations 函数，映射为当前组件的 methods 函数</span>methods<span class="token punctuation">:</span><span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'add'</span><span class="token punctuation">,</span> <span class="token string">'addN'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-4-Action"><a href="#3-4-Action" class="headerlink" title="3.4 Action"></a>3.4 Action</h3><p>Action 用于处理异步任务</p><p>如果通过异步操作变更数据，必须通过 Action，而不能使用 Mutation，但是在 Action 中还是要触发 Mutation 的方式间接变更数据。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 定义 Action</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...省略其他代码</span>    mutations<span class="token punctuation">:</span><span class="token punctuation">{</span>        <span class="token function">add</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">{</span>            state<span class="token punctuation">.</span>count<span class="token operator">++</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    actions<span class="token punctuation">:</span><span class="token punctuation">{</span>        <span class="token function">addAsync</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                context<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'add'</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 触发 Action</span>methods<span class="token punctuation">:</span><span class="token punctuation">{</span>    <span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 触发 action 的第一种方式</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'addAsync'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>触发 actions 异步任务时携带参数：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 定义 Action</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//...省略其他代码</span>    mutations<span class="token punctuation">:</span><span class="token punctuation">{</span>        <span class="token function">addN</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> step<span class="token punctuation">)</span><span class="token punctuation">{</span>            state<span class="token punctuation">.</span>count <span class="token operator">+</span><span class="token operator">=</span> step        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    actions<span class="token punctuation">:</span><span class="token punctuation">{</span>        <span class="token function">addNAsync</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> step<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>                context<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'addN'</span><span class="token punctuation">,</span> step<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 触发 Action</span>methods<span class="token punctuation">:</span><span class="token punctuation">{</span>    <span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 在调用 dispatch 函数，</span>        <span class="token comment" spellcheck="true">// 触发 actions 时携带参数</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'addNAsync'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>this.$store.dispatch() 是触发 actions 的第一种方式，触发 actions 的第二种方式：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 1. 从vuex 中按需导入 mapActions 函数</span><span class="token keyword">import</span> <span class="token punctuation">{</span> mapActions <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>通过刚才导入的 mapActions 函数，将需要的 actions 函数，映射为当前组件的 methods 方法：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 2. 将指定的 actions 函数，映射为当前组件的 methods 函数</span>methods<span class="token punctuation">:</span><span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'addASync'</span><span class="token punctuation">,</span> <span class="token string">'addNAsync'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-5-Getter"><a href="#3-5-Getter" class="headerlink" title="3.5 Getter"></a>3.5 Getter</h3><p>Getter 用于对 Store 中的数据进行加工处理形成新的数据。</p><ol><li>Getter 可以对 Store 中已有的数据加工处理之后形成新的数据，类似 Vue 的计算属性。</li><li>Store 中数据发送变化，Getter 的数据也会跟着变化。</li></ol><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 定义 Getter</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    state<span class="token punctuation">:</span><span class="token punctuation">{</span>        count<span class="token punctuation">:</span><span class="token number">0</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    getters<span class="token punctuation">:</span><span class="token punctuation">{</span>        showNum<span class="token punctuation">:</span>state <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">'当前最新的数量是【'</span><span class="token operator">+</span> state<span class="token punctuation">.</span>count <span class="token operator">+</span><span class="token string">'】'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 getters 的第一种方式：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span>名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用 getters 的第二种方式：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> mapGetters <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span>computed<span class="token punctuation">:</span><span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'showNum'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-6-Module"><a href="#3-6-Module" class="headerlink" title="3.6 Module"></a>3.6 Module</h3><p>Vue 使用单一状态树，那么也意味着很多状态都会交给 Vuex 来管理。</p><p>当应用变得非常复杂时，store 对象就有可能变得相当臃肿。</p><p>为了解决这个问题，Vuex 允许我们将 store 分割成模块（Module），而每个模块拥有自己的 state、mutations、actions、getters 等</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> moduleA <span class="token operator">=</span> <span class="token punctuation">{</span>    state<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    mutations<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    actions<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    getters<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>              <span class="token keyword">const</span> moduleB <span class="token operator">=</span> <span class="token punctuation">{</span>    state<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    mutations<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    actions<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    getters<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>              <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    modeles<span class="token punctuation">:</span> <span class="token punctuation">{</span>        a<span class="token punctuation">:</span> moduleA<span class="token punctuation">,</span>        b<span class="token punctuation">:</span> moduleB    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>                store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>a <span class="token comment" spellcheck="true">// -> moduleA 的状态</span>store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>b <span class="token comment" spellcheck="true">// -> moduleB 的状态</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Less 的基本使用</title>
      <link href="/2021/06/27/less-de-ji-ben-shi-yong/"/>
      <url>/2021/06/27/less-de-ji-ben-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="Less"><a href="#Less" class="headerlink" title="Less"></a>Less</h1><p>less 是一种动态样式语言，属于 css 预处理器的范畴，它扩展了 css 语言</p><p>增加了变量、Mixin、函数等特性，使 css 更易维护和扩展</p><p>less 既可以在客户端上运行，也可以借助 Node.js 在服务端运行</p><p>vscode 编译插件—— easyless</p><h2 id="less中的注释"><a href="#less中的注释" class="headerlink" title="less中的注释"></a>less中的注释</h2><p>以 // 开头的注释，不会被编译到 css 文件中</p><p>以 /**/ 包裹的注释会被编译到 css 文件中</p><h2 id="less中的变量"><a href="#less中的变量" class="headerlink" title="less中的变量"></a>less中的变量</h2><p>使用@来申明一个变量：@pink:pink;</p><ol><li>作为普通属性值来使用：直接使用@pink</li><li>作为选择器和属性名：@{selector的值} 的形式</li><li>作为 URL：@{url}</li><li>变量的延迟加载</li></ol><pre class="line-numbers language-less"><code class="language-less"><span class="token comment" spellcheck="true">// 延迟加载</span><span class="token variable">@var<span class="token punctuation">:</span></span><span class="token number">0</span><span class="token punctuation">;</span><span class="token selector">.class</span><span class="token punctuation">{</span>    <span class="token variable">@var<span class="token punctuation">:</span></span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token selector">.brass</span><span class="token punctuation">{</span>        <span class="token variable">@var<span class="token punctuation">:</span></span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token property">three</span><span class="token punctuation">:</span><span class="token variable">@var</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span>        <span class="token variable">@var<span class="token punctuation">:</span></span><span class="token number">3</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token property">one</span><span class="token punctuation">:</span><span class="token variable">@var</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="less中的嵌套规则"><a href="#less中的嵌套规则" class="headerlink" title="less中的嵌套规则"></a>less中的嵌套规则</h2><ol><li>基本嵌套规则</li><li>&amp;的使用</li></ol><h2 id="less中的混合"><a href="#less中的混合" class="headerlink" title="less中的混合"></a>less中的混合</h2><p>混合就是将一系列属性从一个规则集引入到另一个规则集的方式</p><p>混合的定义在less规则有明确的指定，使用 . 的形式来定义</p><ol><li>普通混合（会编译到原生 css 中）</li><li>不带输出的混合（后面加括号，不会编译到原生 css 中）</li><li>带参数的混合</li><li>带参数并且有默认值的混合</li><li>带多个参数的混合</li><li>命名参数</li><li>匹配模式</li><li>arguments变量</li></ol><h2 id="less运算"><a href="#less运算" class="headerlink" title="less运算"></a>less运算</h2><p>在 less 中可以进行加减乘除的运算</p><h2 id="less继承"><a href="#less继承" class="headerlink" title="less继承"></a>less继承</h2><p>性能比混合高</p><p>灵活度比混合低</p><h2 id="less避免编译"><a href="#less避免编译" class="headerlink" title="less避免编译"></a>less避免编译</h2><p>加上 ~</p><pre class="line-numbers language-less"><code class="language-less"><span class="token selector">.test</span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token number">300</span>px <span class="token operator">-</span> <span class="token number">30</span>px<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token selector">=>.test</span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token number">270</span>px<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个calc，有时候我们是让浏览器计算，而不是让less计算</p><pre class="line-numbers language-less"><code class="language-less"><span class="token selector">.test</span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> ~<span class="token string">'calc(300px - 30px)'</span> <span class="token comment" spellcheck="true">// ~ 避免编译</span><span class="token punctuation">}</span><span class="token selector">=>.test</span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token number">300</span>px <span class="token operator">-</span> <span class="token number">30</span>px<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Less </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AJAX简介及使用</title>
      <link href="/2021/06/20/ajax-jian-jie-ji-shi-yong/"/>
      <url>/2021/06/20/ajax-jian-jie-ji-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h1><h2 id="第-1-章：原生-AJAX"><a href="#第-1-章：原生-AJAX" class="headerlink" title="第 1 章：原生 AJAX"></a>第 1 章：原生 AJAX</h2><h3 id="1-1-AJAX-简介"><a href="#1-1-AJAX-简介" class="headerlink" title="1.1 AJAX 简介"></a>1.1 AJAX 简介</h3><p>AJAX 全称为 Asynchronous JavaScript And XML，就是异步的 JS 和 XML。</p><p>通过 AJAX 可以在浏览器中向服务器发送异步请求，最大的优势：无刷新获取数据。</p><p>AJAX 不是新的编程语言，而是一种将现有的标准组合在一起使用的新方式。</p><h3 id="1-2-XML-简介"><a href="#1-2-XML-简介" class="headerlink" title="1.2 XML 简介"></a>1.2 XML 简介</h3><p>XML 可扩展标记语言。</p><p>XML 被设计用来传输和存储数据。</p><p>XML 和 HTML 类似，不同的是 HTML 中都是预定义标签，而 XML 中没有预定义标签，全都是自定义标签，用来表示一些数据。</p><pre class="line-numbers language-xml"><code class="language-xml">比如说我有一个学生数据：name = "孙悟空"; age = 18; gender = "男";用 XML 表示：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>student</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>孙悟空<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>age</span><span class="token punctuation">></span></span>18<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>age</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>gender</span><span class="token punctuation">></span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>gender</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>student</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在已经被 JSON 取代了。</p><pre class="line-numbers language-json"><code class="language-json">用 JSON 表示：<span class="token punctuation">{</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"孙悟空"</span><span class="token punctuation">,</span> <span class="token property">"age"</span><span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token property">"gender"</span><span class="token operator">:</span><span class="token string">"男"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1-3-AJAX-的特点"><a href="#1-3-AJAX-的特点" class="headerlink" title="1.3 AJAX 的特点"></a>1.3 AJAX 的特点</h3><h4 id="1-3-1-AJAX-的优点"><a href="#1-3-1-AJAX-的优点" class="headerlink" title="1.3.1 AJAX 的优点"></a>1.3.1 AJAX 的优点</h4><ol><li>可以无需刷新页面与服务器端进行通信。</li><li>允许你根据用户事件来更新部分页面内容。</li></ol><h4 id="1-3-2-AJAX的缺点"><a href="#1-3-2-AJAX的缺点" class="headerlink" title="1.3.2 AJAX的缺点"></a>1.3.2 AJAX的缺点</h4><ol><li>没有浏览历史，不能回退</li><li>存在跨域问题（同源）</li><li>SEO 不友好</li></ol><h3 id="1-4-AJAX-的使用"><a href="#1-4-AJAX-的使用" class="headerlink" title="1.4 AJAX 的使用"></a>1.4 AJAX 的使用</h3><h4 id="1-4-1-核心对象"><a href="#1-4-1-核心对象" class="headerlink" title="1.4.1 核心对象"></a>1.4.1 核心对象</h4><p>XMLHttpRequest，AJAX 的所有操作都是通过该对象进行的。</p><h4 id="1-4-2-使用步骤"><a href="#1-4-2-使用步骤" class="headerlink" title="1.4.2 使用步骤"></a>1.4.2 使用步骤</h4><ol><li><p>创建 XMLHttpRequest 对象</p><p>var xhr = new XMLHttpRequest();</p></li><li><p>设置请求信息</p><p>xhr.open(method, url);</p><p>// 可以设置请求头，一般不设置</p><p>xhr.setRequestHeader(‘Content-Type’, ‘application/x-www-form-urlencoded’);</p></li><li><p>发送请求</p><p>xhr.send(body)    // get 请求不传 body 参数，只有 post 请求使用</p></li><li><p>接收响应</p><p>// xhr.responseXML 接收 xml 格式的响应数据</p><p>// xhr.responseText 接收文本格式的响应数据</p><p>xhr.onreadystatechange = function(){</p><p>​    if(xhr.readyState == 4 &amp;&amp; xhr.status == 200){</p><p>​        var text = xhr.responseText;</p><p>​        console.log(text)</p><p>​    }</p><p>}</p></li></ol><h4 id="1-4-3-解决-IE-缓存问题"><a href="#1-4-3-解决-IE-缓存问题" class="headerlink" title="1.4.3 解决 IE 缓存问题"></a>1.4.3 解决 IE 缓存问题</h4><p>​    问题：在一些浏览器中（IE），由于缓存机制的存在，ajax 只会发送第一次请求，剩余多次请求不会再发送给浏览器而是直接加载缓存中的数据。</p><p>​    解决方法：浏览器的缓存是根据 url 地址来记录的，所以我们只需要修改 url 地址即可避免缓存问题</p><p>​    xhr.open(“get”, “/testAJAX?t=” + Date.now());</p><h4 id="1-4-4-AJAX-请求状态"><a href="#1-4-4-AJAX-请求状态" class="headerlink" title="1.4.4 AJAX 请求状态"></a>1.4.4 AJAX 请求状态</h4><p>xhr.readyState 可以用来查看请求当前的状态</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/readyState">https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/readyState</a></p><p>0：表示 XMLHttpRequest 实例已经生成，但是 open() 方法还没有被调用。</p><p>1：表示 send() 方法还没有被调用，仍然可以使用 setRequestHeader()，设定 HTTP 请求的头信息。</p><p>2：表示 send() 方法已经执行，并且头信息和状态码已经收到。</p><p>3：表示正在接收服务器传来的 body 部分的数据。</p><p>4：表示服务器数据已经完全接收，或者本次接收已经失败了。</p><h2 id="第-2-章：jQuery-中的-AJAX"><a href="#第-2-章：jQuery-中的-AJAX" class="headerlink" title="第 2 章：jQuery 中的 AJAX"></a>第 2 章：jQuery 中的 AJAX</h2><h3 id="2-1-get请求"><a href="#2-1-get请求" class="headerlink" title="2.1 get请求"></a>2.1 get请求</h3><p>$.get(url, [data], [callback], [type])</p><p>​    url: 请求的 URL 地址。</p><p>​    data: 请求携带的参数。</p><p>​    callback: 载入成功时回调函数。</p><p>​    type: 设置返回内容格式，xml，html，script，json，text，_default。</p><h3 id="2-2-post请求"><a href="#2-2-post请求" class="headerlink" title="2.2 post请求"></a>2.2 post请求</h3><p>$.post(url, [data], [callback], [type])</p><p>​    url: 请求的 URL 地址。</p><p>​    data: 请求携带的参数。</p><p>​    callback: 载入成功时回调函数。</p><p>​    type: 设置返回内容格式，xml，html，script，json，text，_default。</p><p>​    </p><h2 id="第-3-章：跨域"><a href="#第-3-章：跨域" class="headerlink" title="第 3 章：跨域"></a>第 3 章：跨域</h2><h3 id="3-1-同源策略"><a href="#3-1-同源策略" class="headerlink" title="3.1 同源策略"></a>3.1 同源策略</h3><p>同源策略（Same-Origin Policy）最早由 Netscape 公司提出，是浏览器的一种安全策略。</p><p>同源：协议、域名、端口号 必须完全相同。</p><p>违背同源策略就是跨域。</p><h3 id="3-2-如何解决跨域"><a href="#3-2-如何解决跨域" class="headerlink" title="3.2 如何解决跨域"></a>3.2 如何解决跨域</h3><h4 id="3-2-1-JSONP"><a href="#3-2-1-JSONP" class="headerlink" title="3.2.1 JSONP"></a>3.2.1 JSONP</h4><ol><li><p>JSONP 是什么</p><p>JSONP（JSON with Padding），是一个非官方的跨域解决方案，存粹凭借程序员的聪明才智开发出来，只支持 get 请求。</p></li><li><p>JSONP 怎么工作的？</p><p>在网页有一些标签天生具有跨域能力，比如：img link iframe script。</p><p>JSONP 就是利用 script 标签的跨域能力来发送请求的。</p></li><li><p>JSONP 的使用</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 1. 动态的创建一个 script 标签</span><span class="token keyword">var</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"script"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 2. 设置 script 的 src，设置回调函数</span>script<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">"http://localhost:3000/testAJAX?callback=abc"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">abc</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 3. 将 script 添加到 body 中</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 4. 服务器中路由的处理</span>route<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"/testAJAX"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"收到请求"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> callback <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>callback<span class="token punctuation">;</span>    <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span><span class="token string">"孙悟空"</span><span class="token punctuation">,</span>        age<span class="token punctuation">:</span><span class="token number">18</span>    <span class="token punctuation">}</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>callback<span class="token operator">+</span><span class="token string">"("</span><span class="token operator">+</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>jQuery 中的 JSONP</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="3-2-2-CORS"><a href="#3-2-2-CORS" class="headerlink" title="3.2.2 CORS"></a>3.2.2 CORS</h4><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS</a></p><ol><li><p>CORS 是什么？</p><p>CORS（Cross-Origin Resource Sharing），跨域资源共享。CORS 是官方的跨域解决方案，它的特点是不需要在客户端做任何特殊的操作，完全在服务器中进行处理，支持 get 和 post 请求。跨域资源共享标准新增了一组 HTTP 首部字段，允许服务器声明哪些源站通过浏览器有权限访问哪些资源。</p></li><li><p>CORS 怎么工作的？</p><p>CORS 是通过设置一个响应头来告诉浏览器，该请求允许跨域，浏览器收到该响应以后就会对响应放行。</p></li><li><p>CORS 的使用</p><p>主要是服务器端的设置：</p><pre class="line-numbers language-javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"/testAJAX"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 通过 res 来设置响应头，来允许跨域请求</span>    <span class="token comment" spellcheck="true">// res.setHeader('Access-Control-Allow-Origin', 'http://127.0.0.1:5000');</span>    res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Origin'</span><span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"testAJAX 返回的响应"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> AJAX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSON vs XML</title>
      <link href="/2021/06/12/json-vs-xml/"/>
      <url>/2021/06/12/json-vs-xml/</url>
      
        <content type="html"><![CDATA[<p>JSON vs XML</p><p>JSON 和 XML 都用于接收 web 服务端的数据。</p><p>JSON 和 XML 在写法上有所不同，如下所示：</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"site"</span><span class="token operator">:</span><span class="token punctuation">[</span>        <span class="token punctuation">{</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"JSON"</span><span class="token punctuation">,</span> <span class="token property">"url"</span><span class="token operator">:</span><span class="token string">"www"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"google"</span><span class="token punctuation">,</span> <span class="token property">"url"</span><span class="token operator">:</span><span class="token string">"www.google.com"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"微博"</span><span class="token punctuation">,</span> <span class="token property">"url"</span><span class="token operator">:</span><span class="token string">"www.weibo.com"</span><span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sites</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>site</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>XML<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>www<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>site</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>site</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>google<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>www.google.com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>site</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>site</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>微博<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>www.weibo.com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>site</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sites</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JSON </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm常用的安装命令</title>
      <link href="/2021/06/10/npm-chang-yong-de-an-zhuang-ming-ling/"/>
      <url>/2021/06/10/npm-chang-yong-de-an-zhuang-ming-ling/</url>
      
        <content type="html"><![CDATA[<h2 id="1、npm常用的安装命令"><a href="#1、npm常用的安装命令" class="headerlink" title="1、npm常用的安装命令"></a>1、npm常用的安装命令</h2><p>npm i 就是 npm install 简写<br>npm i xxx -D   就是 npm i xxx –save-dev<br>npm i xxx -S   就是 npm i xxx –save<br>npm i xxx -g   就是 全局安装<br>npm i xxx      就是 npm i xxx –save</p><h2 id="2、–save-dev-和-–save-的区别"><a href="#2、–save-dev-和-–save-的区别" class="headerlink" title="2、–save-dev 和 –save 的区别"></a>2、–save-dev 和 –save 的区别</h2><p>使用 –save-dev 安装的 插件，被写入到 devDependencies 对象里面去，</p><p>而使用 –save 安装的插件，则被写入到 dependencies 对象里面去。</p><h2 id="3、devDependencies-和-dependencies-区别"><a href="#3、devDependencies-和-dependencies-区别" class="headerlink" title="3、devDependencies 和 dependencies 区别"></a>3、devDependencies 和 dependencies 区别</h2><p>devDependencies 和 dependencies 对象区别：</p><p>devDependencies 里面的插件只用于开发环境，不用于生产环境，</p><p>而 dependencies 是需要发布到生产环境的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Nodejs </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
